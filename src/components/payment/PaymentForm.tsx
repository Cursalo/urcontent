import React, { useState } from 'react';
import { motion } from 'framer-motion';
import { CreditCard, Shield, Lock, AlertCircle, CheckCircle, DollarSign } from 'lucide-react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Checkbox } from '@/components/ui/checkbox';
import { Label } from '@/components/ui/label';
import { Badge } from '@/components/ui/badge';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Separator } from '@/components/ui/separator';
import { formatCurrency } from '@/lib/utils';
import { useToast } from '@/hooks/use-toast'; interface PaymentDetails { amount: number; currency: string; description: string; collaborationId?: string; creatorId?: string; businessId?: string;
} interface PaymentFormProps { paymentDetails: PaymentDetails; onPaymentSuccess: (paymentId: string) => void; onPaymentError: (error: string) => void; className?: string;
} const paymentSchema = z.object({ cardNumber: z.string().min(16, 'NÃºmero de tarjeta invÃ¡lido').max(19), expiryDate: z.string().regex(/^(0[1-9]|1[0-2])\/\d{2}$/, 'Formato: MM/YY'), cvv: z.string().min(3, 'CVV invÃ¡lido').max(4), cardholderName: z.string().min(2, 'Nombre requerido'), email: z.string().email('Email invÃ¡lido'), identificationType: z.enum(['DNI', 'CUIT', 'CUIL']), identificationNumber: z.string().min(8, 'NÃºmero de identificaciÃ³n invÃ¡lido'), installments: z.number().min(1).max(12), saveCard: z.boolean().optional(), acceptTerms: z.boolean().refine(val => val === true, 'Debe aceptar los tÃ©rminos')
}); type PaymentFormData = z.infer<typeof paymentSchema>; const INSTALLMENTS_OPTIONS = [ { value: 1, label: '1 pago (sin interÃ©s)', interest: 0 }, { value: 3, label: '3 cuotas', interest: 5 }, { value: 6, label: '6 cuotas', interest: 10 }, { value: 12, label: '12 cuotas', interest: 15 }
]; const CARD_TYPES = { visa: { name: 'Visa', icon: 'ðŸ’³', color: 'bg-gray-700' }, mastercard: { name: 'Mastercard', icon: 'ðŸ—¿', color: 'bg-gray-700' }, amex: { name: 'American Express', icon: 'ðŸ”µ', color: 'bg-gray-700' }, unknown: { name: 'Tarjeta', icon: 'ðŸ’³', color: 'bg-gray-600' }
}; export const PaymentForm: React.FC<PaymentFormProps> = ({ paymentDetails, onPaymentSuccess, onPaymentError, className = ''
}) => { const [isProcessing, setIsProcessing] = useState(false); const [cardType, setCardType] = useState<keyof typeof CARD_TYPES>('unknown'); const [selectedInstallments, setSelectedInstallments] = useState(1); const { toast } = useToast(); const form = useForm<PaymentFormData>({ resolver: zodResolver(paymentSchema), defaultValues: { cardNumber: '', expiryDate: '', cvv: '', cardholderName: '', email: '', identificationType: 'DNI', identificationNumber: '', installments: 1, saveCard: false, acceptTerms: false } }); // Detect card type based on number const detectCardType = (cardNumber: string) => { const cleaned = cardNumber.replace(/\s/g, ''); if (cleaned.startsWith('4')) return 'visa'; if (cleaned.startsWith('5') || cleaned.startsWith('2')) return 'mastercard'; if (cleaned.startsWith('3')) return 'amex'; return 'unknown'; }; // Format card number with spaces const formatCardNumber = (value: string) => { const cleaned = value.replace(/\s/g, ''); const match = cleaned.match(/.{1,4}/g); return match ? match.join(' ') : cleaned; }; // Format expiry date const formatExpiryDate = (value: string) => { const cleaned = value.replace(/\D/g, ''); if (cleaned.length >= 2) { return cleaned.substring(0, 2) + '/' + cleaned.substring(2, 4); } return cleaned; }; const handleCardNumberChange = (value: string) => { const formatted = formatCardNumber(value); setCardType(detectCardType(formatted)); return formatted; }; const calculateTotalAmount = () => { const installmentOption = INSTALLMENTS_OPTIONS.find(opt => opt.value === selectedInstallments); const interest = installmentOption ? installmentOption.interest : 0; return paymentDetails.amount * (1 + interest / 100); }; const handleSubmit = async (data: PaymentFormData) => { setIsProcessing(true); try { // Simulate MercadoPago API call await new Promise(resolve => setTimeout(resolve, 3000)); // Mock payment processing const mockPaymentId = `payment_${Date.now()}`; // Success onPaymentSuccess(mockPaymentId); toast({ title: 'Pago procesado exitosamente', description: `Se procesÃ³ el pago de ${formatCurrency(calculateTotalAmount())} correctamente.`, }); } catch (error) { const errorMessage = 'Error al procesar el pago. Intenta nuevamente.'; onPaymentError(errorMessage); toast({ title: 'Error en el pago', description: errorMessage, variant: 'destructive' }); } finally { setIsProcessing(false); } }; return ( <div className={`max-w-2xl mx-auto space-y-6 ${className}`}> {/* Payment Summary */} <Card> <CardHeader> <CardTitle className="flex items-center gap-2"> <DollarSign className="h-5 w-5"/> Resumen del pago </CardTitle> </CardHeader> <CardContent> <div className="space-y-3"> <div className="flex justify-between items-center"> <span>Concepto:</span> <span className="font-medium">{paymentDetails.description}</span> </div> <div className="flex justify-between items-center"> <span>Monto base:</span> <span>{formatCurrency(paymentDetails.amount)}</span> </div> <div className="flex justify-between items-center"> <span>Cuotas:</span> <Select value={selectedInstallments.toString()} onValueChange={(value) => { const installments = parseInt(value); setSelectedInstallments(installments); form.setValue('installments', installments); }} > <SelectTrigger className="w-48"> <SelectValue /> </SelectTrigger> <SelectContent> {INSTALLMENTS_OPTIONS.map(option => ( <SelectItem key={option.value} value={option.value.toString()}> {option.label} {option.interest > 0 && ( <span className="text-xs text-muted-foreground ml-2"> (+{option.interest}%) </span> )} </SelectItem> ))} </SelectContent> </Select> </div> {selectedInstallments > 1 && ( <div className="flex justify-between items-center text-sm text-muted-foreground"> <span>InterÃ©s por financiaciÃ³n:</span> <span> +{formatCurrency(calculateTotalAmount() - paymentDetails.amount)} </span> </div> )} <Separator /> <div className="flex justify-between items-center text-lg font-bold"> <span>Total a pagar:</span> <span>{formatCurrency(calculateTotalAmount())}</span> </div> {selectedInstallments > 1 && ( <div className="text-sm text-muted-foreground text-right"> {selectedInstallments} cuotas de {formatCurrency(calculateTotalAmount() / selectedInstallments)} </div> )} </div> </CardContent> </Card> {/* Payment Form */} <Card> <CardHeader> <CardTitle className="flex items-center gap-2"> <CreditCard className="h-5 w-5"/> Datos de la tarjeta </CardTitle> </CardHeader> <CardContent> <Form {...form}> <form onSubmit={form.handleSubmit(handleSubmit)} className="space-y-6"> {/* Card Number */} <FormField control={form.control} name="cardNumber"render={({ field }) => ( <FormItem> <FormLabel>NÃºmero de tarjeta *</FormLabel> <FormControl> <div className="relative"> <Input {...field} placeholder="1234 5678 9012 3456"maxLength={19} onChange={(e) => { const formatted = handleCardNumberChange(e.target.value); field.onChange(formatted); }} className="pr-12"/> <div className={`absolute right-3 top-1/2 transform -translate-y-1/2 w-8 h-5 rounded text-white text-xs flex items-center justify-center ${CARD_TYPES[cardType].color}`}> {CARD_TYPES[cardType].icon} </div> </div> </FormControl> <FormMessage /> </FormItem> )} /> {/* Expiry and CVV */} <div className="grid grid-cols-2 gap-4"> <FormField control={form.control} name="expiryDate"render={({ field }) => ( <FormItem> <FormLabel>Vencimiento *</FormLabel> <FormControl> <Input {...field} placeholder="MM/YY"maxLength={5} onChange={(e) => { const formatted = formatExpiryDate(e.target.value); field.onChange(formatted); }} /> </FormControl> <FormMessage /> </FormItem> )} /> <FormField control={form.control} name="cvv"render={({ field }) => ( <FormItem> <FormLabel>CVV *</FormLabel> <FormControl> <Input {...field} type="password"placeholder="123"maxLength={4} onChange={(e) => { const value = e.target.value.replace(/\D/g, ''); field.onChange(value); }} /> </FormControl> <FormMessage /> </FormItem> )} /> </div> {/* Cardholder Name */} <FormField control={form.control} name="cardholderName"render={({ field }) => ( <FormItem> <FormLabel>Nombre del titular *</FormLabel> <FormControl> <Input {...field} placeholder="Juan PÃ©rez"onChange={(e) => { const value = e.target.value.toUpperCase(); field.onChange(value); }} /> </FormControl> <FormMessage /> </FormItem> )} /> <Separator /> {/* Billing Information */} <div className="space-y-4"> <h3 className="font-medium">Datos de facturaciÃ³n</h3> <FormField control={form.control} name="email"render={({ field }) => ( <FormItem> <FormLabel>Email *</FormLabel> <FormControl> <Input {...field} type="email"placeholder="juan@ejemplo.com"/> </FormControl> <FormMessage /> </FormItem> )} /> <div className="grid grid-cols-2 gap-4"> <FormField control={form.control} name="identificationType"render={({ field }) => ( <FormItem> <FormLabel>Tipo de documento *</FormLabel> <Select onValueChange={field.onChange} defaultValue={field.value}> <FormControl> <SelectTrigger> <SelectValue /> </SelectTrigger> </FormControl> <SelectContent> <SelectItem value="DNI">DNI</SelectItem> <SelectItem value="CUIT">CUIT</SelectItem> <SelectItem value="CUIL">CUIL</SelectItem> </SelectContent> </Select> <FormMessage /> </FormItem> )} /> <FormField control={form.control} name="identificationNumber"render={({ field }) => ( <FormItem> <FormLabel>NÃºmero de documento *</FormLabel> <FormControl> <Input {...field} placeholder="12345678"onChange={(e) => { const value = e.target.value.replace(/\D/g, ''); field.onChange(value); }} /> </FormControl> <FormMessage /> </FormItem> )} /> </div> </div> <Separator /> {/* Options */} <div className="space-y-4"> <FormField control={form.control} name="saveCard"render={({ field }) => ( <FormItem className="flex flex-row items-start space-x-3 space-y-0"> <FormControl> <Checkbox checked={field.value} onCheckedChange={field.onChange} /> </FormControl> <div className="space-y-1 leading-none"> <FormLabel className="cursor-pointer"> Guardar tarjeta para futuros pagos </FormLabel> <div className="text-xs text-muted-foreground"> Tus datos estarÃ¡n seguros y encriptados </div> </div> </FormItem> )} /> <FormField control={form.control} name="acceptTerms"render={({ field }) => ( <FormItem className="flex flex-row items-start space-x-3 space-y-0"> <FormControl> <Checkbox checked={field.value} onCheckedChange={field.onChange} /> </FormControl> <div className="space-y-1 leading-none"> <FormLabel className="cursor-pointer"> Acepto los tÃ©rminos y condiciones * </FormLabel> <div className="text-xs text-muted-foreground"> Al continuar, aceptas nuestros{' '} <a href="#"className="text-primary hover:underline"> tÃ©rminos de servicio </a>{' '} y{' '} <a href="#"className="text-primary hover:underline"> polÃ­tica de privacidad </a> </div> </div> </FormItem> )} /> </div> {/* Security Notice */} <Alert> <Shield className="h-4 w-4"/> <AlertDescription> <div className="flex items-center gap-2"> <Lock className="h-4 w-4"/> <span className="font-medium">Pago 100% seguro</span> </div> Tus datos estÃ¡n protegidos con encriptaciÃ³n SSL de 256 bits. Procesado por MercadoPago. </AlertDescription> </Alert> {/* Submit Button */} <Button type="submit"size="lg"disabled={isProcessing} className="w-full"> {isProcessing ? ( <> <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-white mr-2"/> Procesando pago... </> ) : ( <> <CreditCard className="h-4 w-4 mr-2"/> Pagar {formatCurrency(calculateTotalAmount())} </> )} </Button> </form> </Form> </CardContent> </Card> {/* Accepted Cards */} <Card> <CardContent className="pt-6"> <div className="text-center"> <div className="text-sm text-muted-foreground mb-3">MÃ©todos de pago aceptados</div> <div className="flex justify-center items-center gap-4"> {Object.entries(CARD_TYPES).slice(0, -1).map(([key, card]) => ( <div key={key} className={`w-12 h-8 rounded flex items-center justify-center text-white ${card.color}`}> {card.icon} </div> ))} <Badge variant="outline"className="ml-4"> MercadoPago </Badge> </div> </div> </CardContent> </Card> </div> );
}; export default PaymentForm;