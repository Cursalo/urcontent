import React, { useState, useEffect } from 'react';
import { motion, AnimatePresence } from 'framer-motion';
import { CheckCircle, Clock, AlertTriangle, XCircle, CreditCard, Download, RefreshCw, Calendar, DollarSign, User, Building
} from 'lucide-react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Separator } from '@/components/ui/separator';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { formatCurrency, formatDate, formatRelativeTime } from '@/lib/utils'; export type PaymentStatusType = | 'pending' | 'processing' | 'approved' | 'rejected' | 'cancelled' | 'refunded' | 'partially_refunded' | 'disputed'; export interface PaymentData { id: string; status: PaymentStatusType; amount: number; currency: string; description: string; createdAt: string; updatedAt: string; payer: { name: string; email: string; identificationType: string; identificationNumber: string; }; paymentMethod: { type: 'credit_card' | 'debit_card' | 'bank_transfer'; brand: string; lastFourDigits: string; installments: number; }; collaboration?: { id: string; title: string; creator: { name: string; avatar: string; }; }; transaction: { authorizationCode?: string; referenceId?: string; processorResponse?: string; }; timeline: { created: string; authorized?: string; captured?: string; settled?: string; refunded?: string; }; refunds?: { id: string; amount: number; reason: string; createdAt: string; status: 'pending' | 'approved' | 'rejected'; }[]; disputes?: { id: string; reason: string; amount: number; createdAt: string; status: 'open' | 'pending' | 'resolved'; }[];
} interface PaymentStatusProps { payment: PaymentData; onRefresh?: () => void; onDownloadReceipt?: () => void; onRequestRefund?: () => void; onContactSupport?: () => void; showActions?: boolean; className?: string;
} const getStatusConfig = (status: PaymentStatusType) => { switch (status) { case 'pending': return { icon: Clock, color: 'bg-gray-100 text-gray-900 dark:bg-gray-900 dark:text-gray-200', label: 'Pendiente', description: 'El pago está siendo procesado', progress: 25 }; case 'processing': return { icon: RefreshCw, color: 'bg-gray-100 text-gray-900 dark:bg-gray-900 dark:text-gray-200', label: 'Procesando', description: 'Verificando la transacción', progress: 50 }; case 'approved': return { icon: CheckCircle, color: 'bg-gray-100 text-gray-900 dark:bg-gray-900 dark:text-gray-200', label: 'Aprobado', description: 'Pago exitoso', progress: 100 }; case 'rejected': return { icon: XCircle, color: 'bg-gray-100 text-gray-900 dark:bg-gray-900 dark:text-gray-200', label: 'Rechazado', description: 'El pago fue rechazado', progress: 0 }; case 'cancelled': return { icon: XCircle, color: 'bg-gray-100 text-gray-800 dark:bg-gray-800 dark:text-gray-200', label: 'Cancelado', description: 'Pago cancelado', progress: 0 }; case 'refunded': return { icon: RefreshCw, color: 'bg-gray-100 text-gray-900 dark:bg-gray-900 dark:text-gray-200', label: 'Reembolsado', description: 'Monto reembolsado completamente', progress: 100 }; case 'partially_refunded': return { icon: RefreshCw, color: 'bg-gray-100 text-gray-900 dark:bg-gray-900 dark:text-gray-200', label: 'Reembolso parcial', description: 'Monto parcialmente reembolsado', progress: 75 }; case 'disputed': return { icon: AlertTriangle, color: 'bg-gray-100 text-gray-900 dark:bg-gray-900 dark:text-gray-200', label: 'En disputa', description: 'Pago en proceso de disputa', progress: 50 }; default: return { icon: Clock, color: 'bg-gray-100 text-gray-800', label: 'Desconocido', description: 'Estado desconocido', progress: 0 }; }
}; const getPaymentMethodIcon = (type: string, brand: string) => { switch (brand.toLowerCase()) { case 'visa': return '💳'; case 'mastercard': return '🗿'; case 'amex': return '🔵'; default: return '💳'; }
}; export const PaymentStatus: React.FC<PaymentStatusProps> = ({ payment, onRefresh, onDownloadReceipt, onRequestRefund, onContactSupport, showActions = true, className = ''
}) => { const [isRefreshing, setIsRefreshing] = useState(false); const statusConfig = getStatusConfig(payment.status); const StatusIcon = statusConfig.icon; const handleRefresh = async () => { if (onRefresh) { setIsRefreshing(true); await onRefresh(); setTimeout(() => setIsRefreshing(false), 1000); } }; const totalRefunded = payment.refunds?.reduce((sum, refund) => { return refund.status === 'approved' ? sum + refund.amount : sum; }, 0) || 0; return ( <div className={`max-w-4xl mx-auto space-y-6 ${className}`}> {/* Status Header */} <motion.div initial={{ opacity: 0, y: -20 }} animate={{ opacity: 1, y: 0 }} > <Card> <CardHeader> <div className="flex items-center justify-between"> <div className="space-y-2"> <CardTitle className="text-2xl flex items-center gap-3"> <div className={`p-2 rounded-full ${statusConfig.color}`}> <StatusIcon className={`h-6 w-6 ${ payment.status === 'processing' ? 'animate-spin' : '' }`} /> </div> {statusConfig.label} </CardTitle> <p className="text-muted-foreground">{statusConfig.description}</p> </div> <div className="text-right"> <div className="text-2xl font-bold"> {formatCurrency(payment.amount)} </div> <div className="text-sm text-muted-foreground"> ID: {payment.id} </div> </div> </div> {/* Progress Bar */} <div className="space-y-2"> <Progress value={statusConfig.progress} className="h-2"/> <div className="flex justify-between text-xs text-muted-foreground"> <span>Iniciado</span> <span>Procesando</span> <span>Completado</span> </div> </div> </CardHeader> </Card> </motion.div> <div className="grid grid-cols-1 lg:grid-cols-2 gap-6"> {/* Payment Details */} <motion.div initial={{ opacity: 0, x: -20 }} animate={{ opacity: 1, x: 0 }} transition={{ delay: 0.1 }} > <Card> <CardHeader> <CardTitle>Detalles del pago</CardTitle> </CardHeader> <CardContent className="space-y-4"> <div className="space-y-3"> <div className="flex justify-between"> <span>Concepto:</span> <span className="font-medium">{payment.description}</span> </div> <div className="flex justify-between"> <span>Fecha:</span> <span>{formatDate(payment.createdAt)}</span> </div> <div className="flex justify-between"> <span>Método de pago:</span> <div className="flex items-center gap-2"> <span>{getPaymentMethodIcon(payment.paymentMethod.type, payment.paymentMethod.brand)}</span> <span>**** {payment.paymentMethod.lastFourDigits}</span> </div> </div> {payment.paymentMethod.installments > 1 && ( <div className="flex justify-between"> <span>Cuotas:</span> <span>{payment.paymentMethod.installments}x</span> </div> )} {payment.transaction.authorizationCode && ( <div className="flex justify-between"> <span>Código de autorización:</span> <span className="font-mono text-sm"> {payment.transaction.authorizationCode} </span> </div> )} <Separator /> <div className="flex justify-between font-semibold"> <span>Total:</span> <span>{formatCurrency(payment.amount)}</span> </div> {totalRefunded > 0 && ( <div className="flex justify-between text-sm text-muted-foreground"> <span>Reembolsado:</span> <span>-{formatCurrency(totalRefunded)}</span> </div> )} </div> {/* Collaboration Info */} {payment.collaboration && ( <> <Separator /> <div className="space-y-3"> <h4 className="font-medium">Colaboración</h4> <div className="flex items-center gap-3"> <Avatar className="h-10 w-10"> <AvatarImage src={payment.collaboration.creator.avatar} alt={payment.collaboration.creator.name} /> <AvatarFallback> {payment.collaboration.creator.name.charAt(0)} </AvatarFallback> </Avatar> <div> <div className="font-medium"> {payment.collaboration.title} </div> <div className="text-sm text-muted-foreground"> con {payment.collaboration.creator.name} </div> </div> </div> </div> </> )} </CardContent> </Card> </motion.div> {/* Payer Information */} <motion.div initial={{ opacity: 0, x: 20 }} animate={{ opacity: 1, x: 0 }} transition={{ delay: 0.2 }} > <Card> <CardHeader> <CardTitle>Información del pagador</CardTitle> </CardHeader> <CardContent className="space-y-4"> <div className="space-y-3"> <div className="flex items-center gap-2"> <User className="h-4 w-4 text-muted-foreground"/> <span>{payment.payer.name}</span> </div> <div className="flex items-center gap-2"> <span className="text-sm text-muted-foreground"> {payment.payer.identificationType}: </span> <span>{payment.payer.identificationNumber}</span> </div> <div className="flex items-center gap-2"> <span className="text-sm text-muted-foreground">Email:</span> <span>{payment.payer.email}</span> </div> </div> {/* Actions */} {showActions && ( <> <Separator /> <div className="space-y-2"> <Button variant="outline"size="sm"className="w-full"onClick={handleRefresh} disabled={isRefreshing} > <RefreshCw className={`h-4 w-4 mr-2 ${ isRefreshing ? 'animate-spin' : '' }`} /> {isRefreshing ? 'Actualizando...' : 'Actualizar estado'} </Button> {payment.status === 'approved' && onDownloadReceipt && ( <Button variant="outline"size="sm"className="w-full"onClick={onDownloadReceipt} > <Download className="h-4 w-4 mr-2"/> Descargar comprobante </Button> )} {(payment.status === 'approved' || payment.status === 'partially_refunded') && onRequestRefund && ( <Button variant="outline"size="sm"className="w-full"onClick={onRequestRefund} > <RefreshCw className="h-4 w-4 mr-2"/> Solicitar reembolso </Button> )} {onContactSupport && ( <Button variant="ghost"size="sm"className="w-full"onClick={onContactSupport} > Contactar soporte </Button> )} </div> </> )} </CardContent> </Card> </motion.div> </div> {/* Timeline */} <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.3 }} > <Card> <CardHeader> <CardTitle>Timeline de la transacción</CardTitle> </CardHeader> <CardContent> <div className="space-y-4"> {/* Created */} <div className="flex items-start gap-3"> <div className="flex items-center justify-center w-8 h-8 rounded-full bg-gray-100 text-gray-700"> <CreditCard className="h-4 w-4"/> </div> <div className="flex-1"> <div className="font-medium">Pago iniciado</div> <div className="text-sm text-muted-foreground"> Se inició el proceso de pago </div> <div className="text-xs text-muted-foreground"> {formatRelativeTime(payment.timeline.created)} </div> </div> </div> {/* Authorized */} {payment.timeline.authorized && ( <div className="flex items-start gap-3"> <div className="flex items-center justify-center w-8 h-8 rounded-full bg-gray-100 text-gray-700"> <CheckCircle className="h-4 w-4"/> </div> <div className="flex-1"> <div className="font-medium">Pago autorizado</div> <div className="text-sm text-muted-foreground"> La transacción fue autorizada </div> <div className="text-xs text-muted-foreground"> {formatRelativeTime(payment.timeline.authorized)} </div> </div> </div> )} {/* Captured */} {payment.timeline.captured && ( <div className="flex items-start gap-3"> <div className="flex items-center justify-center w-8 h-8 rounded-full bg-gray-100 text-gray-700"> <CheckCircle className="h-4 w-4"/> </div> <div className="flex-1"> <div className="font-medium">Pago capturado</div> <div className="text-sm text-muted-foreground"> Los fondos fueron capturados </div> <div className="text-xs text-muted-foreground"> {formatRelativeTime(payment.timeline.captured)} </div> </div> </div> )} {/* Refunded */} {payment.timeline.refunded && ( <div className="flex items-start gap-3"> <div className="flex items-center justify-center w-8 h-8 rounded-full bg-gray-100 text-gray-700"> <RefreshCw className="h-4 w-4"/> </div> <div className="flex-1"> <div className="font-medium">Pago reembolsado</div> <div className="text-sm text-muted-foreground"> Se procesó el reembolso </div> <div className="text-xs text-muted-foreground"> {formatRelativeTime(payment.timeline.refunded)} </div> </div> </div> )} </div> </CardContent> </Card> </motion.div> {/* Refunds */} {payment.refunds && payment.refunds.length > 0 && ( <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.4 }} > <Card> <CardHeader> <CardTitle>Reembolsos</CardTitle> </CardHeader> <CardContent> <div className="space-y-3"> {payment.refunds.map((refund) => ( <div key={refund.id} className="flex items-center justify-between p-3 border rounded"> <div> <div className="font-medium">Reembolso #{refund.id}</div> <div className="text-sm text-muted-foreground">{refund.reason}</div> <div className="text-xs text-muted-foreground"> {formatRelativeTime(refund.createdAt)} </div> </div> <div className="text-right"> <div className="font-medium">{formatCurrency(refund.amount)}</div> <Badge variant={refund.status === 'approved' ? 'default' : 'secondary'} className="text-xs"> {refund.status === 'approved' && 'Aprobado'} {refund.status === 'pending' && 'Pendiente'} {refund.status === 'rejected' && 'Rechazado'} </Badge> </div> </div> ))} </div> </CardContent> </Card> </motion.div> )} {/* Disputes */} {payment.disputes && payment.disputes.length > 0 && ( <motion.div initial={{ opacity: 0, y: 20 }} animate={{ opacity: 1, y: 0 }} transition={{ delay: 0.5 }} > <Card> <CardHeader> <CardTitle>Disputas</CardTitle> </CardHeader> <CardContent> <div className="space-y-3"> {payment.disputes.map((dispute) => ( <Alert key={dispute.id}> <AlertTriangle className="h-4 w-4"/> <AlertDescription> <div className="flex justify-between items-start"> <div> <div className="font-medium">Disputa #{dispute.id}</div> <div className="text-sm">{dispute.reason}</div> <div className="text-xs text-muted-foreground"> {formatRelativeTime(dispute.createdAt)} </div> </div> <div className="text-right"> <div className="font-medium">{formatCurrency(dispute.amount)}</div> <Badge variant="destructive"className="text-xs"> {dispute.status === 'open' && 'Abierta'} {dispute.status === 'pending' && 'Pendiente'} {dispute.status === 'resolved' && 'Resuelta'} </Badge> </div> </div> </AlertDescription> </Alert> ))} </div> </CardContent> </Card> </motion.div> )} {/* Error States */} {payment.status === 'rejected' && ( <Alert variant="destructive"> <XCircle className="h-4 w-4"/> <AlertDescription> <div className="font-medium mb-1">Pago rechazado</div> <div className="text-sm"> {payment.transaction.processorResponse || 'Tu pago fue rechazado. Verifica los datos de tu tarjeta e inténtalo nuevamente.'} </div> </AlertDescription> </Alert> )} </div> );
}; export default PaymentStatus;