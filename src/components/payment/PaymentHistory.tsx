import React, { useState, useEffect } from 'react';
import { useQuery, useMutation } from '@tanstack/react-query';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { paymentsService, type Payment, type PaymentFilters } from '@/services';
import { useAuth } from '@/contexts/AuthContext';
import { toast } from 'sonner';
import { Search, Filter, Download, Eye, CreditCard, Calendar, DollarSign, FileText, CheckCircle, XCircle, Clock, ArrowUpDown, MoreHorizontal, Receipt, RefreshCw, Loader2
} from 'lucide-react';
import { formatCurrency } from '@/lib/mercadopago'; interface PaymentHistoryProps { userId?: string; userType?: 'creator' | 'business';
} export const PaymentHistory: React.FC<PaymentHistoryProps> = ({ userId: propUserId, userType }) => { const { user } = useAuth(); const currentUserId = propUserId || user?.id; const [searchTerm, setSearchTerm] = useState(''); const [statusFilter, setStatusFilter] = useState<string>('all'); const [typeFilter, setTypeFilter] = useState<string>('all'); const [sortBy, setSortBy] = useState<'date' | 'amount'>('date'); const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc'); const [filters, setFilters] = useState<PaymentFilters>({}); // Fetch payments with filters const { data: payments = [], isLoading, error, refetch } = useQuery({ queryKey: ['payments', currentUserId, filters], queryFn: () => { const queryFilters: PaymentFilters = { ...filters, user_id: currentUserId }; if (searchTerm) { queryFilters.search_term = searchTerm; } if (statusFilter !== 'all') { queryFilters.status = statusFilter as any; } if (typeFilter !== 'all') { queryFilters.type = typeFilter as any; } return paymentsService.getPayments(queryFilters, 100); }, enabled: !!currentUserId }); // Export mutation const exportMutation = useMutation({ mutationFn: async () => { const queryFilters: PaymentFilters = { ...filters, user_id: currentUserId }; if (searchTerm) { queryFilters.search_term = searchTerm; } if (statusFilter !== 'all') { queryFilters.status = statusFilter as any; } if (typeFilter !== 'all') { queryFilters.type = typeFilter as any; } return paymentsService.exportPayments(queryFilters); }, onSuccess: (csvData) => { const blob = new Blob([csvData], { type: 'text/csv' }); const url = window.URL.createObjectURL(blob); const link = document.createElement('a'); link.href = url; link.download = `pagos-${new Date().toISOString().split('T')[0]}.csv`; document.body.appendChild(link); link.click(); document.body.removeChild(link); window.URL.revokeObjectURL(url); toast.success('Archivo exportado exitosamente'); }, onError: (error: any) => { toast.error(error?.message || 'Error al exportar pagos'); } }); // Sort payments based on current sort settings const sortedPayments = React.useMemo(() => { if (!payments) return []; return [...payments].sort((a, b) => { if (sortBy === 'date') { const dateA = new Date(a.created_at).getTime(); const dateB = new Date(b.created_at).getTime(); return sortOrder === 'desc' ? dateB - dateA : dateA - dateB; } else { return sortOrder === 'desc' ? b.amount - a.amount : a.amount - b.amount; } }); }, [payments, sortBy, sortOrder]); const getStatusBadge = (status: Payment['status']) => { const badges = { approved: { label: 'Aprobado', color: 'bg-gray-100 text-gray-900' }, pending: { label: 'Pendiente', color: 'bg-gray-100 text-gray-900' }, rejected: { label: 'Rechazado', color: 'bg-gray-100 text-gray-900' }, cancelled: { label: 'Cancelado', color: 'bg-gray-100 text-gray-800' }, refunded: { label: 'Reembolsado', color: 'bg-gray-100 text-gray-900' } }; const badge = badges[status]; return <Badge className={badge.color}>{badge.label}</Badge>; }; const getStatusIcon = (status: Payment['status']) => { switch (status) { case 'approved': return <CheckCircle className="w-4 h-4 text-gray-700"/>; case 'pending': return <Clock className="w-4 h-4 text-gray-700"/>; case 'rejected': return <XCircle className="w-4 h-4 text-gray-700"/>; case 'cancelled': return <XCircle className="w-4 h-4 text-gray-600"/>; case 'refunded': return <RefreshCw className="w-4 h-4 text-gray-700"/>; } }; const getTypeLabel = (type: Payment['type']) => { const labels = { membership: 'Membresía', collaboration: 'Colaboración', experience: 'Experiencia', campaign_deposit: 'Depósito' }; return labels[type]; }; const getTypeIcon = (type: Payment['type']) => { switch (type) { case 'membership': return <CreditCard className="w-4 h-4 text-gray-700"/>; case 'collaboration': return <FileText className="w-4 h-4 text-gray-700"/>; case 'experience': return <Calendar className="w-4 h-4 text-gray-700"/>; case 'campaign_deposit': return <DollarSign className="w-4 h-4 text-gray-700"/>; } }; // Update search term and refetch const handleSearch = (term: string) => { setSearchTerm(term); // Debounce search to avoid too many requests const timeoutId = setTimeout(() => { refetch(); }, 300); return () => clearTimeout(timeoutId); }; const handleStatusFilter = (status: string) => { setStatusFilter(status); refetch(); }; const handleTypeFilter = (type: string) => { setTypeFilter(type); refetch(); }; const handleSort = (field: 'date' | 'amount') => { if (sortBy === field) { setSortOrder(sortOrder === 'desc' ? 'asc' : 'desc'); } else { setSortBy(field); setSortOrder('desc'); } }; const exportPayments = () => { exportMutation.mutate(); }; const getTotalAmounts = () => { const approved = sortedPayments .filter(p => p.status === 'approved') .reduce((sum, p) => sum + p.amount, 0); const pending = sortedPayments .filter(p => p.status === 'pending') .reduce((sum, p) => sum + p.amount, 0); return { approved, pending, total: approved + pending }; }; const amounts = getTotalAmounts(); // Show loading state if (isLoading) { return ( <div className="space-y-6"> <div className="flex justify-center items-center h-64"> <Loader2 className="w-8 h-8 animate-spin text-gray-400"/> <span className="ml-2 text-gray-600">Cargando historial de pagos...</span> </div> </div> ); } // Show error state if (error) { return ( <div className="space-y-6"> <Card className="p-6"> <div className="text-center"> <XCircle className="w-12 h-12 text-gray-400 mx-auto mb-4"/> <h3 className="text-lg font-medium text-gray-900 mb-2"> Error al cargar pagos </h3> <p className="text-gray-600 mb-4"> No se pudieron cargar los datos de pagos </p> <Button onClick={() => refetch()} variant="outline"> <RefreshCw className="w-4 h-4 mr-2"/> Reintentar </Button> </div> </Card> </div> ); } return ( <div className="space-y-6"> {/* Summary Cards */} <div className="grid grid-cols-1 md:grid-cols-3 gap-6"> <Card className="p-6 bg-gray-900 border-gray-200"> <div className="flex items-center space-x-4"> <div className="w-12 h-12 bg-gray-100 rounded flex items-center justify-center"> <CheckCircle className="w-6 h-6 text-gray-700"/> </div> <div> <p className="text-sm font-medium text-gray-800">Pagos Aprobados</p> <p className="text-2xl font-bold text-gray-900"> {formatCurrency(amounts.approved)} </p> </div> </div> </Card> <Card className="p-6 bg-gray-900 border-gray-200"> <div className="flex items-center space-x-4"> <div className="w-12 h-12 bg-gray-100 rounded flex items-center justify-center"> <Clock className="w-6 h-6 text-gray-700"/> </div> <div> <p className="text-sm font-medium text-gray-800">Pagos Pendientes</p> <p className="text-2xl font-bold text-gray-900"> {formatCurrency(amounts.pending)} </p> </div> </div> </Card> <Card className="p-6 bg-gray-900 border-gray-200"> <div className="flex items-center space-x-4"> <div className="w-12 h-12 bg-gray-100 rounded flex items-center justify-center"> <DollarSign className="w-6 h-6 text-gray-700"/> </div> <div> <p className="text-sm font-medium text-gray-800">Total</p> <p className="text-2xl font-bold text-gray-900"> {formatCurrency(amounts.total)} </p> </div> </div> </Card> </div> {/* Filters and Search */} <Card className="p-6"> <div className="flex flex-col sm:flex-row gap-4 mb-6"> {/* Search */} <div className="flex-1 relative"> <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4"/> <Input placeholder="Buscar pagos..."value={searchTerm} onChange={(e) => handleSearch(e.target.value)} className="pl-10"/> </div> {/* Status Filter */} <Select value={statusFilter} onValueChange={handleStatusFilter}> <SelectTrigger className="w-40"> <SelectValue placeholder="Estado"/> </SelectTrigger> <SelectContent> <SelectItem value="all">Todos los estados</SelectItem> <SelectItem value="approved">Aprobado</SelectItem> <SelectItem value="pending">Pendiente</SelectItem> <SelectItem value="rejected">Rechazado</SelectItem> <SelectItem value="cancelled">Cancelado</SelectItem> <SelectItem value="refunded">Reembolsado</SelectItem> </SelectContent> </Select> {/* Type Filter */} <Select value={typeFilter} onValueChange={handleTypeFilter}> <SelectTrigger className="w-40"> <SelectValue placeholder="Tipo"/> </SelectTrigger> <SelectContent> <SelectItem value="all">Todos los tipos</SelectItem> <SelectItem value="membership">Membresía</SelectItem> <SelectItem value="collaboration">Colaboración</SelectItem> <SelectItem value="experience">Experiencia</SelectItem> <SelectItem value="campaign_deposit">Depósito</SelectItem> </SelectContent> </Select> {/* Export Button */} <Button onClick={exportPayments} variant="outline"className="flex items-center"disabled={exportMutation.isPending} > {exportMutation.isPending ? ( <> <Loader2 className="w-4 h-4 mr-2 animate-spin"/> Exportando... </> ) : ( <> <Download className="w-4 h-4 mr-2"/> Exportar </> )} </Button> </div> {/* Sort Options */} <div className="flex space-x-2 mb-4"> <Button variant={sortBy === 'date' ? 'default' : 'outline'} size="sm"onClick={() => handleSort('date')} className="flex items-center"> <Calendar className="w-4 h-4 mr-2"/> Fecha <ArrowUpDown className="w-4 h-4 ml-2"/> </Button> <Button variant={sortBy === 'amount' ? 'default' : 'outline'} size="sm"onClick={() => handleSort('amount')} className="flex items-center"> <DollarSign className="w-4 h-4 mr-2"/> Monto <ArrowUpDown className="w-4 h-4 ml-2"/> </Button> </div> </Card> {/* Payment List */} <Card> <div className="divide-y divide-gray-200"> {sortedPayments.length === 0 ? ( <div className="p-12 text-center"> <FileText className="w-12 h-12 text-gray-400 mx-auto mb-4"/> <h3 className="text-lg font-medium text-gray-900 mb-2"> No se encontraron pagos </h3> <p className="text-gray-600"> Intenta ajustar los filtros o realizar una nueva búsqueda </p> </div> ) : ( sortedPayments.map((payment) => ( <div key={payment.id} className="p-6 hover:bg-gray-50 transition-colors"> <div className="flex items-center justify-between"> <div className="flex items-center space-x-4 flex-1"> {/* Icon and Type */} <div className="flex items-center space-x-3"> <div className="w-10 h-10 bg-gray-100 rounded flex items-center justify-center"> {getTypeIcon(payment.type)} </div> <div> <Badge variant="outline"className="text-xs"> {getTypeLabel(payment.type)} </Badge> </div> </div> {/* Payment Details */} <div className="flex-1"> <div className="flex items-center justify-between"> <div> <h4 className="font-medium text-gray-900"> {payment.description} </h4> <div className="flex items-center space-x-4 mt-1"> <span className="text-sm text-gray-600"> {new Date(payment.created_at).toLocaleDateString('es-AR', { year: 'numeric', month: 'short', day: 'numeric', hour: '2-digit', minute: '2-digit' })} </span> <span className="text-sm text-gray-600"> {payment.payment_method} </span> <span className="text-sm text-gray-500 font-mono"> {payment.transaction_id} </span> </div> {/* Metadata */} {payment.metadata && ( <div className="flex items-center space-x-4 mt-2"> {payment.metadata.creator_name && ( <span className="text-xs text-gray-500"> Creador: {payment.metadata.creator_name} </span> )} {payment.metadata.venue && ( <span className="text-xs text-gray-500"> Venue: {payment.metadata.venue} </span> )} {payment.metadata.membership_tier && ( <span className="text-xs text-gray-500"> Plan: {payment.metadata.membership_tier} </span> )} </div> )} </div> <div className="text-right"> <div className="font-semibold text-lg text-gray-900"> {formatCurrency(payment.amount)} </div> <div className="flex items-center space-x-2 mt-1"> {getStatusIcon(payment.status)} {getStatusBadge(payment.status)} </div> </div> </div> </div> {/* Actions */} <div className="flex items-center space-x-2"> <Dialog> <DialogTrigger asChild> <Button variant="outline"size="sm"> <Eye className="w-4 h-4 mr-2"/> Ver </Button> </DialogTrigger> <DialogContent className="max-w-2xl"> <DialogHeader> <DialogTitle>Detalles del Pago</DialogTitle> </DialogHeader> <div className="space-y-6"> {/* Payment Header */} <div className="flex items-center justify-between"> <div className="flex items-center space-x-3"> <div className="w-12 h-12 bg-gray-100 rounded flex items-center justify-center"> {getTypeIcon(payment.type)} </div> <div> <h3 className="text-lg font-semibold">{payment.description}</h3> <p className="text-sm text-gray-600">{getTypeLabel(payment.type)}</p> </div> </div> {getStatusBadge(payment.status)} </div> {/* Payment Info */} <div className="grid grid-cols-2 gap-6"> <div> <h4 className="font-medium text-gray-900 mb-3">Información del Pago</h4> <div className="space-y-2 text-sm"> <div className="flex justify-between"> <span className="text-gray-600">Monto:</span> <span className="font-medium">{formatCurrency(payment.amount)}</span> </div> <div className="flex justify-between"> <span className="text-gray-600">Método:</span> <span>{payment.payment_method}</span> </div> <div className="flex justify-between"> <span className="text-gray-600">Fecha:</span> <span> {new Date(payment.created_at).toLocaleDateString('es-AR', { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' })} </span> </div> <div className="flex justify-between"> <span className="text-gray-600">ID Transacción:</span> <span className="font-mono text-xs">{payment.transaction_id}</span> </div> </div> </div> {payment.metadata && ( <div> <h4 className="font-medium text-gray-900 mb-3">Detalles Adicionales</h4> <div className="space-y-2 text-sm"> {Object.entries(payment.metadata).map(([key, value]) => ( <div key={key} className="flex justify-between"> <span className="text-gray-600 capitalize"> {key.replace(/_/g, ' ')}: </span> <span>{value}</span> </div> ))} </div> </div> )} </div> {/* Actions */} <div className="flex space-x-3 pt-4 border-t"> <Button variant="outline"className="flex-1"> <Receipt className="w-4 h-4 mr-2"/> Descargar Comprobante </Button> {payment.status === 'approved' && ( <Button variant="outline"className="flex-1"> <FileText className="w-4 h-4 mr-2"/> Ver Factura </Button> )} </div> </div> </DialogContent> </Dialog> </div> </div> </div> </div> )) )} </div> </Card> </div> );
};