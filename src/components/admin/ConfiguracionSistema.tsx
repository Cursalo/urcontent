import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from"@/components/ui/card";
import { Button } from"@/components/ui/button";
import { Input } from"@/components/ui/input";
import { Label } from"@/components/ui/label";
import { Switch } from"@/components/ui/switch";
import { Textarea } from"@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from"@/components/ui/select";
import { Tabs, TabsContent, TabsList, TabsTrigger } from"@/components/ui/tabs";
import { Badge } from"@/components/ui/badge";
import { Separator } from"@/components/ui/separator";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from"@/components/ui/dialog";
import { Alert, AlertDescription, AlertTitle } from"@/components/ui/alert";
import { Slider } from"@/components/ui/slider";
import { Settings, DollarSign, Percent, Globe, Bell, Shield, Mail, CreditCard, FileText, Database, Server, Lock, Key, Users, Store, Camera, AlertTriangle, CheckCircle, Info, Save, RefreshCw, Plus, Trash2, Edit, Eye, EyeOff, Upload, Download, Zap, Palette, Languages, Clock, Calendar, HelpCircle, ExternalLink, Copy, Check,
} from"lucide-react";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow,
} from"@/components/ui/table"; export const ConfiguracionSistema = () => { const [guardandoCambios, setGuardandoCambios] = useState(false); const [mostrarConfirmacion, setMostrarConfirmacion] = useState(false); const [copiadoAlPortapapeles, setCopiadoAlPortapapeles] = useState<string | null>(null); // Estados de configuración const [configuracion, setConfiguracion] = useState({ comisiones: { general: 15, nuevosUsuarios: 10, premium: 12, minimo: 5, maximo: 25, }, pagos: { metodosActivos: ['stripe', 'paypal', 'mercadopago'], monedaPrincipal: 'MXN', retencionDias: 7, pagoMinimo: 500, }, notificaciones: { emailNuevoUsuario: true, emailNuevaColaboracion: true, emailDisputa: true, emailPago: true, smsAlertas: false, pushNotifications: true, }, seguridad: { autenticacion2FA: true, sesionTimeout: 30, intentosLogin: 5, passwordMinLength: 8, requireSpecialChars: true, }, sistema: { modoMantenimiento: false, debugMode: false, logLevel: 'info', backupAutomatico: true, backupFrecuencia: 'diario', } }); // Categorías disponibles const [categorias, setCategorias] = useState([ { id: 1, nombre: 'Restaurantes', slug: 'restaurantes', activa: true, orden: 1 }, { id: 2, nombre: 'Fitness', slug: 'fitness', activa: true, orden: 2 }, { id: 3, nombre: 'Moda', slug: 'moda', activa: true, orden: 3 }, { id: 4, nombre: 'Tecnología', slug: 'tecnologia', activa: true, orden: 4 }, { id: 5, nombre: 'Belleza', slug: 'belleza', activa: true, orden: 5 }, { id: 6, nombre: 'Viajes', slug: 'viajes', activa: true, orden: 6 }, ]); // Términos y políticas const [terminos, setTerminos] = useState({ terminosServicio: { version: '2.1', ultimaActualizacion: '2024-07-15', contenido: 'Términos de servicio...', }, politicaPrivacidad: { version: '1.8', ultimaActualizacion: '2024-07-10', contenido: 'Política de privacidad...', }, politicaCookies: { version: '1.2', ultimaActualizacion: '2024-06-20', contenido: 'Política de cookies...', }, }); const handleGuardarCambios = async () => { setGuardandoCambios(true); // Simular guardado await new Promise(resolve => setTimeout(resolve, 2000)); setGuardandoCambios(false); setMostrarConfirmacion(true); setTimeout(() => setMostrarConfirmacion(false), 3000); }; const handleCopiarAPI = (key: string) => { navigator.clipboard.writeText(key); setCopiadoAlPortapapeles(key); setTimeout(() => setCopiadoAlPortapapeles(null), 2000); }; const agregarCategoria = () => { const nuevaCategoria = { id: categorias.length + 1, nombre: 'Nueva Categoría', slug: 'nueva-categoria', activa: false, orden: categorias.length + 1, }; setCategorias([...categorias, nuevaCategoria]); }; const eliminarCategoria = (id: number) => { setCategorias(categorias.filter(cat => cat.id !== id)); }; return ( <div className="space-y-6"> {/* Header */} <div className="flex items-center justify-between"> <div> <h2 className="text-2xl font-bold">Configuración del Sistema</h2> <p className="text-gray-600">Administra todas las configuraciones de la plataforma URContent</p> </div> <div className="flex items-center space-x-2"> <Button variant="outline"size="sm"> <Download className="w-4 h-4 mr-2"/> Exportar Config </Button> <Button variant="outline"size="sm"> <Upload className="w-4 h-4 mr-2"/> Importar Config </Button> <Button onClick={handleGuardarCambios} disabled={guardandoCambios} className="bg-gray-900 hover:from-gray-800 hover:to-gray-800"> {guardandoCambios ? ( <> <RefreshCw className="w-4 h-4 mr-2 animate-spin"/> Guardando... </> ) : ( <> <Save className="w-4 h-4 mr-2"/> Guardar Cambios </> )} </Button> </div> </div> {/* Confirmación de guardado */} {mostrarConfirmacion && ( <Alert className="border-gray-200 bg-gray-50"> <CheckCircle className="h-4 w-4 text-gray-700"/> <AlertTitle className="text-gray-900">Cambios guardados</AlertTitle> <AlertDescription className="text-gray-800"> La configuración se ha actualizado correctamente. </AlertDescription> </Alert> )} {/* Tabs de configuración */} <Tabs defaultValue="comisiones"className="space-y-4"> <TabsList className="grid w-full grid-cols-6"> <TabsTrigger value="comisiones">Comisiones</TabsTrigger> <TabsTrigger value="pagos">Pagos</TabsTrigger> <TabsTrigger value="categorias">Categorías</TabsTrigger> <TabsTrigger value="notificaciones">Notificaciones</TabsTrigger> <TabsTrigger value="seguridad">Seguridad</TabsTrigger> <TabsTrigger value="sistema">Sistema</TabsTrigger> </TabsList> {/* Tab Comisiones */} <TabsContent value="comisiones"className="space-y-6"> <Card> <CardHeader> <CardTitle className="flex items-center space-x-2"> <Percent className="w-5 h-5"/> <span>Configuración de Comisiones</span> </CardTitle> <CardDescription>Define las tasas de comisión para diferentes tipos de usuarios y transacciones</CardDescription> </CardHeader> <CardContent className="space-y-6"> <div className="grid grid-cols-1 md:grid-cols-2 gap-6"> <div className="space-y-2"> <Label>Comisión General (%)</Label> <div className="flex items-center space-x-4"> <Slider value={[configuracion.comisiones.general]} onValueChange={(value) => setConfiguracion({ ...configuracion, comisiones: { ...configuracion.comisiones, general: value[0] } })} max={30} step={1} className="flex-1"/> <span className="w-12 text-right font-medium">{configuracion.comisiones.general}%</span> </div> <p className="text-sm text-gray-500">Aplicada a todas las colaboraciones estándar</p> </div> <div className="space-y-2"> <Label>Comisión Nuevos Usuarios (%)</Label> <div className="flex items-center space-x-4"> <Slider value={[configuracion.comisiones.nuevosUsuarios]} onValueChange={(value) => setConfiguracion({ ...configuracion, comisiones: { ...configuracion.comisiones, nuevosUsuarios: value[0] } })} max={30} step={1} className="flex-1"/> <span className="w-12 text-right font-medium">{configuracion.comisiones.nuevosUsuarios}%</span> </div> <p className="text-sm text-gray-500">Promoción para primeras 3 colaboraciones</p> </div> <div className="space-y-2"> <Label>Comisión Premium (%)</Label> <div className="flex items-center space-x-4"> <Slider value={[configuracion.comisiones.premium]} onValueChange={(value) => setConfiguracion({ ...configuracion, comisiones: { ...configuracion.comisiones, premium: value[0] } })} max={30} step={1} className="flex-1"/> <span className="w-12 text-right font-medium">{configuracion.comisiones.premium}%</span> </div> <p className="text-sm text-gray-500">Para usuarios con membresía premium</p> </div> <div className="space-y-2"> <Label>Rango de Comisiones</Label> <div className="flex items-center space-x-4"> <div className="flex-1"> <div className="flex items-center justify-between text-sm mb-1"> <span>Mínimo: {configuracion.comisiones.minimo}%</span> <span>Máximo: {configuracion.comisiones.maximo}%</span> </div> <div className="h-2 bg-gray-200 rounded-full relative"> <div className="absolute h-full bg-gray-900 rounded-full"style={{ left: `${(configuracion.comisiones.minimo / 30) * 100}%`, right: `${100 - (configuracion.comisiones.maximo / 30) * 100}%` }} /> </div> </div> </div> <p className="text-sm text-gray-500">Límites para comisiones personalizadas</p> </div> </div> <Separator /> <div> <h4 className="font-medium mb-4">Reglas Especiales</h4> <div className="space-y-3"> <div className="flex items-center justify-between p-3 bg-gray-50 rounded"> <div className="flex items-center space-x-3"> <Badge variant="secondary">Volumen Alto</Badge> <span className="text-sm">Más de $100,000 MXN/mes</span> </div> <span className="font-medium">-2% descuento</span> </div> <div className="flex items-center justify-between p-3 bg-gray-50 rounded"> <div className="flex items-center space-x-3"> <Badge variant="secondary">Partner VIP</Badge> <span className="text-sm">Negocios verificados premium</span> </div> <span className="font-medium">-3% descuento</span> </div> <div className="flex items-center justify-between p-3 bg-gray-50 rounded"> <div className="flex items-center space-x-3"> <Badge variant="secondary">Referidos</Badge> <span className="text-sm">Usuarios referidos activos</span> </div> <span className="font-medium">-1% por 6 meses</span> </div> </div> </div> </CardContent> </Card> </TabsContent> {/* Tab Pagos */} <TabsContent value="pagos"className="space-y-6"> <Card> <CardHeader> <CardTitle className="flex items-center space-x-2"> <CreditCard className="w-5 h-5"/> <span>Configuración de Pagos</span> </CardTitle> <CardDescription>Administra métodos de pago, monedas y políticas de transacciones</CardDescription> </CardHeader> <CardContent className="space-y-6"> <div> <Label className="mb-3 block">Métodos de Pago Activos</Label> <div className="grid grid-cols-1 md:grid-cols-3 gap-4"> {['Stripe', 'PayPal', 'MercadoPago', 'Transferencia Bancaria', 'OXXO Pay', 'Crypto'].map((metodo) => ( <div key={metodo} className="flex items-center justify-between p-3 border rounded"> <div className="flex items-center space-x-3"> <CreditCard className="w-5 h-5 text-gray-400"/> <span>{metodo}</span> </div> <Switch checked={configuracion.pagos.metodosActivos.includes(metodo.toLowerCase().replace(' ', ''))} /> </div> ))} </div> </div> <Separator /> <div className="grid grid-cols-1 md:grid-cols-2 gap-6"> <div className="space-y-2"> <Label>Moneda Principal</Label> <Select value={configuracion.pagos.monedaPrincipal}> <SelectTrigger> <SelectValue /> </SelectTrigger> <SelectContent> <SelectItem value="MXN">MXN - Peso Mexicano</SelectItem> <SelectItem value="USD">USD - Dólar Americano</SelectItem> <SelectItem value="EUR">EUR - Euro</SelectItem> </SelectContent> </Select> </div> <div className="space-y-2"> <Label>Período de Retención (días)</Label> <Input type="number"value={configuracion.pagos.retencionDias} onChange={(e) => setConfiguracion({ ...configuracion, pagos: { ...configuracion.pagos, retencionDias: parseInt(e.target.value) } })} /> <p className="text-sm text-gray-500">Días antes de liberar fondos al creador</p> </div> <div className="space-y-2"> <Label>Pago Mínimo</Label> <div className="relative"> <span className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500">$</span> <Input type="number"value={configuracion.pagos.pagoMinimo} onChange={(e) => setConfiguracion({ ...configuracion, pagos: { ...configuracion.pagos, pagoMinimo: parseInt(e.target.value) } })} className="pl-8"/> </div> <p className="text-sm text-gray-500">Monto mínimo para solicitar retiro</p> </div> <div className="space-y-2"> <Label>Comisión de Procesamiento</Label> <div className="relative"> <Input type="number"defaultValue="2.9"step="0.1"className="pr-8"/> <span className="absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500">%</span> </div> <p className="text-sm text-gray-500">Adicional por transacción</p> </div> </div> <Separator /> <div> <h4 className="font-medium mb-4">Configuración de API Keys</h4> <div className="space-y-3"> <div className="p-4 border rounded space-y-3"> <div className="flex items-center justify-between"> <div> <p className="font-medium">Stripe</p> <p className="text-sm text-gray-500">Clave pública</p> </div> <div className="flex items-center space-x-2"> <code className="text-xs bg-gray-100 px-2 py-1 rounded">pk_live_51H...3Ks</code> <Button variant="ghost"size="sm"onClick={() => handleCopiarAPI('pk_live_51H...3Ks')} > {copiadoAlPortapapeles === 'pk_live_51H...3Ks' ? ( <Check className="w-4 h-4 text-gray-700"/> ) : ( <Copy className="w-4 h-4"/> )} </Button> </div> </div> <div className="flex items-center justify-between"> <div> <p className="text-sm text-gray-500">Clave secreta</p> </div> <div className="flex items-center space-x-2"> <code className="text-xs bg-gray-100 px-2 py-1 rounded">sk_live_••••••••</code> <Button variant="ghost"size="sm"> <Eye className="w-4 h-4"/> </Button> </div> </div> </div> </div> </div> </CardContent> </Card> </TabsContent> {/* Tab Categorías */} <TabsContent value="categorias"className="space-y-6"> <Card> <CardHeader> <CardTitle className="flex items-center justify-between"> <div className="flex items-center space-x-2"> <Globe className="w-5 h-5"/> <span>Gestión de Categorías</span> </div> <Button onClick={agregarCategoria} size="sm"> <Plus className="w-4 h-4 mr-2"/> Agregar Categoría </Button> </CardTitle> <CardDescription>Administra las categorías disponibles para colaboraciones</CardDescription> </CardHeader> <CardContent> <Table> <TableHeader> <TableRow> <TableHead>Orden</TableHead> <TableHead>Nombre</TableHead> <TableHead>Slug</TableHead> <TableHead>Estado</TableHead> <TableHead>Colaboraciones</TableHead> <TableHead className="text-right">Acciones</TableHead> </TableRow> </TableHeader> <TableBody> {categorias.map((categoria) => ( <TableRow key={categoria.id}> <TableCell> <Input type="number"value={categoria.orden} className="w-16"onChange={(e) => { const nuevasCategorias = [...categorias]; const index = nuevasCategorias.findIndex(c => c.id === categoria.id); nuevasCategorias[index].orden = parseInt(e.target.value); setCategorias(nuevasCategorias); }} /> </TableCell> <TableCell> <Input value={categoria.nombre} onChange={(e) => { const nuevasCategorias = [...categorias]; const index = nuevasCategorias.findIndex(c => c.id === categoria.id); nuevasCategorias[index].nombre = e.target.value; setCategorias(nuevasCategorias); }} /> </TableCell> <TableCell> <code className="text-sm bg-gray-100 px-2 py-1 rounded">{categoria.slug}</code> </TableCell> <TableCell> <Switch checked={categoria.activa} onCheckedChange={(checked) => { const nuevasCategorias = [...categorias]; const index = nuevasCategorias.findIndex(c => c.id === categoria.id); nuevasCategorias[index].activa = checked; setCategorias(nuevasCategorias); }} /> </TableCell> <TableCell> <Badge variant="secondary">{Math.floor(Math.random() * 1000)}</Badge> </TableCell> <TableCell className="text-right"> <Button variant="ghost"size="sm"onClick={() => eliminarCategoria(categoria.id)} className="text-gray-700 hover:text-gray-800"> <Trash2 className="w-4 h-4"/> </Button> </TableCell> </TableRow> ))} </TableBody> </Table> </CardContent> </Card> </TabsContent> {/* Tab Notificaciones */} <TabsContent value="notificaciones"className="space-y-6"> <Card> <CardHeader> <CardTitle className="flex items-center space-x-2"> <Bell className="w-5 h-5"/> <span>Configuración de Notificaciones</span> </CardTitle> <CardDescription>Define qué notificaciones enviar y a través de qué canales</CardDescription> </CardHeader> <CardContent> <div className="space-y-6"> <div> <h4 className="font-medium mb-4">Notificaciones por Email</h4> <div className="space-y-4"> {[ { key: 'emailNuevoUsuario', label: 'Nuevo usuario registrado', desc: 'Enviar email de bienvenida a nuevos usuarios' }, { key: 'emailNuevaColaboracion', label: 'Nueva colaboración', desc: 'Notificar cuando se crea una nueva colaboración' }, { key: 'emailDisputa', label: 'Disputa abierta', desc: 'Alertar sobre disputas que requieren atención' }, { key: 'emailPago', label: 'Pago procesado', desc: 'Confirmar procesamiento de pagos' }, ].map((notif) => ( <div key={notif.key} className="flex items-center justify-between p-4 border rounded"> <div className="flex items-center space-x-3"> <Mail className="w-5 h-5 text-gray-400"/> <div> <p className="font-medium">{notif.label}</p> <p className="text-sm text-gray-500">{notif.desc}</p> </div> </div> <Switch checked={configuracion.notificaciones[notif.key as keyof typeof configuracion.notificaciones] as boolean} onCheckedChange={(checked) => setConfiguracion({ ...configuracion, notificaciones: { ...configuracion.notificaciones, [notif.key]: checked } })} /> </div> ))} </div> </div> <Separator /> <div> <h4 className="font-medium mb-4">Otros Canales</h4> <div className="space-y-4"> <div className="flex items-center justify-between p-4 border rounded"> <div className="flex items-center space-x-3"> <MessageCircle className="w-5 h-5 text-gray-400"/> <div> <p className="font-medium">SMS Alertas</p> <p className="text-sm text-gray-500">Enviar SMS para alertas críticas</p> </div> </div> <Switch checked={configuracion.notificaciones.smsAlertas} onCheckedChange={(checked) => setConfiguracion({ ...configuracion, notificaciones: { ...configuracion.notificaciones, smsAlertas: checked } })} /> </div> <div className="flex items-center justify-between p-4 border rounded"> <div className="flex items-center space-x-3"> <Bell className="w-5 h-5 text-gray-400"/> <div> <p className="font-medium">Push Notifications</p> <p className="text-sm text-gray-500">Notificaciones en navegador y móvil</p> </div> </div> <Switch checked={configuracion.notificaciones.pushNotifications} onCheckedChange={(checked) => setConfiguracion({ ...configuracion, notificaciones: { ...configuracion.notificaciones, pushNotifications: checked } })} /> </div> </div> </div> <Separator /> <div> <h4 className="font-medium mb-4">Plantillas de Email</h4> <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> {['Bienvenida', 'Colaboración Creada', 'Pago Confirmado', 'Recordatorio'].map((plantilla) => ( <div key={plantilla} className="p-4 border rounded"> <div className="flex items-center justify-between mb-2"> <p className="font-medium">{plantilla}</p> <Button variant="ghost"size="sm"> <Edit className="w-4 h-4"/> </Button> </div> <p className="text-sm text-gray-500">Última actualización: hace 2 días</p> </div> ))} </div> </div> </div> </CardContent> </Card> </TabsContent> {/* Tab Seguridad */} <TabsContent value="seguridad"className="space-y-6"> <Card> <CardHeader> <CardTitle className="flex items-center space-x-2"> <Shield className="w-5 h-5"/> <span>Configuración de Seguridad</span> </CardTitle> <CardDescription>Políticas de seguridad y autenticación de la plataforma</CardDescription> </CardHeader> <CardContent> <div className="space-y-6"> <div className="grid grid-cols-1 md:grid-cols-2 gap-6"> <div className="space-y-4"> <div className="flex items-center justify-between"> <div> <Label>Autenticación de 2 Factores</Label> <p className="text-sm text-gray-500">Requerir 2FA para todos los usuarios</p> </div> <Switch checked={configuracion.seguridad.autenticacion2FA} onCheckedChange={(checked) => setConfiguracion({ ...configuracion, seguridad: { ...configuracion.seguridad, autenticacion2FA: checked } })} /> </div> <div className="space-y-2"> <Label>Timeout de Sesión (minutos)</Label> <Input type="number"value={configuracion.seguridad.sesionTimeout} onChange={(e) => setConfiguracion({ ...configuracion, seguridad: { ...configuracion.seguridad, sesionTimeout: parseInt(e.target.value) } })} /> </div> <div className="space-y-2"> <Label>Intentos de Login Máximos</Label> <Input type="number"value={configuracion.seguridad.intentosLogin} onChange={(e) => setConfiguracion({ ...configuracion, seguridad: { ...configuracion.seguridad, intentosLogin: parseInt(e.target.value) } })} /> </div> </div> <div className="space-y-4"> <div className="space-y-2"> <Label>Longitud Mínima de Contraseña</Label> <Input type="number"value={configuracion.seguridad.passwordMinLength} onChange={(e) => setConfiguracion({ ...configuracion, seguridad: { ...configuracion.seguridad, passwordMinLength: parseInt(e.target.value) } })} /> </div> <div className="flex items-center justify-between"> <div> <Label>Requerir Caracteres Especiales</Label> <p className="text-sm text-gray-500">En contraseñas de usuarios</p> </div> <Switch checked={configuracion.seguridad.requireSpecialChars} onCheckedChange={(checked) => setConfiguracion({ ...configuracion, seguridad: { ...configuracion.seguridad, requireSpecialChars: checked } })} /> </div> <div> <Label>Políticas de Contraseña</Label> <div className="mt-2 space-y-2 text-sm"> <div className="flex items-center space-x-2"> <CheckCircle className="w-4 h-4 text-gray-500"/> <span>Mínimo {configuracion.seguridad.passwordMinLength} caracteres</span> </div> <div className="flex items-center space-x-2"> <CheckCircle className="w-4 h-4 text-gray-500"/> <span>Al menos una mayúscula y minúscula</span> </div> <div className="flex items-center space-x-2"> {configuracion.seguridad.requireSpecialChars ? ( <CheckCircle className="w-4 h-4 text-gray-500"/> ) : ( <X className="w-4 h-4 text-gray-400"/> )} <span>Caracteres especiales (!@#$%)</span> </div> </div> </div> </div> </div> <Separator /> <div> <h4 className="font-medium mb-4">Logs de Seguridad Recientes</h4> <div className="space-y-2"> {[ { tipo: 'warning', mensaje: '5 intentos fallidos de login desde IP 192.168.1.100', tiempo: 'Hace 5 min' }, { tipo: 'info', mensaje: 'Backup de seguridad completado exitosamente', tiempo: 'Hace 2 horas' }, { tipo: 'success', mensaje: '2FA activado para usuario admin@urcontent.com', tiempo: 'Hace 1 día' }, ].map((log, index) => ( <div key={index} className="flex items-start space-x-3 p-3 bg-gray-50 rounded"> {log.tipo === 'warning' && <AlertTriangle className="w-5 h-5 text-gray-500 mt-0.5"/>} {log.tipo === 'info' && <Info className="w-5 h-5 text-gray-500 mt-0.5"/>} {log.tipo === 'success' && <CheckCircle className="w-5 h-5 text-gray-500 mt-0.5"/>} <div className="flex-1"> <p className="text-sm">{log.mensaje}</p> <p className="text-xs text-gray-500">{log.tiempo}</p> </div> </div> ))} </div> </div> </div> </CardContent> </Card> </TabsContent> {/* Tab Sistema */} <TabsContent value="sistema"className="space-y-6"> <Card> <CardHeader> <CardTitle className="flex items-center space-x-2"> <Server className="w-5 h-5"/> <span>Configuración del Sistema</span> </CardTitle> <CardDescription>Opciones avanzadas de sistema y mantenimiento</CardDescription> </CardHeader> <CardContent> <div className="space-y-6"> <Alert className={configuracion.sistema.modoMantenimiento ?"border-gray-200 bg-gray-50":""}> <AlertTriangle className="h-4 w-4"/> <AlertTitle>Modo de Mantenimiento</AlertTitle> <AlertDescription> Cuando está activo, solo los administradores pueden acceder a la plataforma. </AlertDescription> <div className="mt-3"> <Switch checked={configuracion.sistema.modoMantenimiento} onCheckedChange={(checked) => setConfiguracion({ ...configuracion, sistema: { ...configuracion.sistema, modoMantenimiento: checked } })} /> </div> </Alert> <div className="grid grid-cols-1 md:grid-cols-2 gap-6"> <div className="space-y-4"> <div className="flex items-center justify-between"> <div> <Label>Modo Debug</Label> <p className="text-sm text-gray-500">Mostrar información detallada de errores</p> </div> <Switch checked={configuracion.sistema.debugMode} onCheckedChange={(checked) => setConfiguracion({ ...configuracion, sistema: { ...configuracion.sistema, debugMode: checked } })} /> </div> <div className="space-y-2"> <Label>Nivel de Logs</Label> <Select value={configuracion.sistema.logLevel}> <SelectTrigger> <SelectValue /> </SelectTrigger> <SelectContent> <SelectItem value="error">Solo Errores</SelectItem> <SelectItem value="warning">Warnings y Errores</SelectItem> <SelectItem value="info">Información General</SelectItem> <SelectItem value="debug">Debug Completo</SelectItem> </SelectContent> </Select> </div> </div> <div className="space-y-4"> <div className="flex items-center justify-between"> <div> <Label>Backup Automático</Label> <p className="text-sm text-gray-500">Respaldar base de datos automáticamente</p> </div> <Switch checked={configuracion.sistema.backupAutomatico} onCheckedChange={(checked) => setConfiguracion({ ...configuracion, sistema: { ...configuracion.sistema, backupAutomatico: checked } })} /> </div> <div className="space-y-2"> <Label>Frecuencia de Backup</Label> <Select value={configuracion.sistema.backupFrecuencia} disabled={!configuracion.sistema.backupAutomatico} > <SelectTrigger> <SelectValue /> </SelectTrigger> <SelectContent> <SelectItem value="diario">Diario</SelectItem> <SelectItem value="semanal">Semanal</SelectItem> <SelectItem value="mensual">Mensual</SelectItem> </SelectContent> </Select> </div> </div> </div> <Separator /> <div> <h4 className="font-medium mb-4">Información del Sistema</h4> <div className="grid grid-cols-2 md:grid-cols-4 gap-4"> <div className="p-4 bg-gray-50 rounded"> <p className="text-sm text-gray-500">Versión</p> <p className="font-medium">v2.5.3</p> </div> <div className="p-4 bg-gray-50 rounded"> <p className="text-sm text-gray-500">Uptime</p> <p className="font-medium">45 días</p> </div> <div className="p-4 bg-gray-50 rounded"> <p className="text-sm text-gray-500">Base de Datos</p> <p className="font-medium">PostgreSQL 14</p> </div> <div className="p-4 bg-gray-50 rounded"> <p className="text-sm text-gray-500">Servidor</p> <p className="font-medium">AWS EC2</p> </div> </div> </div> <div className="flex items-center justify-between p-4 bg-gray-50 rounded"> <div className="flex items-center space-x-3"> <Database className="w-5 h-5 text-gray-700"/> <div> <p className="font-medium text-gray-900">Último Backup</p> <p className="text-sm text-gray-800">29 de julio, 2024 - 03:00 AM</p> </div> </div> <Button variant="outline"size="sm"> <Download className="w-4 h-4 mr-2"/> Descargar Backup </Button> </div> </div> </CardContent> </Card> </TabsContent> </Tabs> </div> );
};