import React, { useState, useMemo } from"react";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from"@/components/ui/card";
import { Badge } from"@/components/ui/badge";
import { Button } from"@/components/ui/button";
import { Input } from"@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from"@/components/ui/select";
import { Table, TableBody, TableCell, TableHead, TableHeader, TableRow,
} from"@/components/ui/table";
import { Tabs, TabsContent, TabsList, TabsTrigger } from"@/components/ui/tabs";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger,
} from"@/components/ui/dialog";
import { Plus, Search, Filter, MoreHorizontal, Eye, Edit, Trash2, Calendar, Target, Users, TrendingUp, Clock, CheckCircle, AlertCircle
} from"lucide-react"; interface Campaign { id: string; creator_profile?: { user?: { full_name: string; }; username?: string; }; status: string; compensation_amount?: number; reach?: number; engagement_rate?: number; created_at?: string; end_date?: string; title?: string; deliverables?: string;
} interface CampaignManagerProps { campaigns: Campaign[];
} export const CampaignManager: React.FC<CampaignManagerProps> = ({ campaigns = [] }) => { const [searchTerm, setSearchTerm] = useState(""); const [statusFilter, setStatusFilter] = useState("all"); const [activeTab, setActiveTab] = useState("active"); // Format currency const formatCurrency = (amount: number) => { return new Intl.NumberFormat('es-MX', { style: 'currency', currency: 'MXN', minimumFractionDigits: 0 }).format(amount); }; const formatNumber = (num: number) => { if (num >= 1000000) return `${(num / 1000000).toFixed(1)}M`; if (num >= 1000) return `${(num / 1000).toFixed(1)}K`; return num.toString(); }; // Process campaigns with safety checks const processedCampaigns = useMemo(() => { try { if (!Array.isArray(campaigns)) { console.warn('CampaignManager: campaigns is not an array:', campaigns); return []; } return campaigns.map((campaign, index) => { if (!campaign || typeof campaign !== 'object') { console.warn(`CampaignManager: Invalid campaign at index ${index}:`, campaign); return { id: `invalid-campaign-${index}`, title:"Unknown Campaign", creator:"Unknown Creator", status:"unknown", budget: formatCurrency(0), reach:"0", engagement:"0%", startDate:"Unknown", endDate:"Unknown", deliverables:"Not specified"}; } let deliverableTypes ="Not specified"; try { if (campaign.deliverables && typeof campaign.deliverables === 'string') { const parsed = JSON.parse(campaign.deliverables); if (Array.isArray(parsed)) { deliverableTypes = parsed .map((d: any) => d?.type || 'Unknown') .filter(Boolean) .join(', ') ||"Not specified"; } } } catch (e) { console.warn('Failed to parse deliverables:', campaign.deliverables, e); deliverableTypes = campaign.title ||"Not specified"; } return { id: campaign.id || `campaign-${index}`, title: campaign.title ||"Untitled Campaign", creator: campaign.creator_profile?.user?.full_name ||"Unknown Creator", creatorUsername: campaign.creator_profile?.username ||"unknown", status: campaign.status ||"unknown", budget: formatCurrency(campaign.compensation_amount || 0), reach: formatNumber(campaign.reach || 0), engagement: `${(campaign.engagement_rate || 0).toFixed(1)}%`, startDate: campaign.created_at ? new Date(campaign.created_at).toLocaleDateString() :"Unknown", endDate: campaign.end_date ? new Date(campaign.end_date).toLocaleDateString() :"Not set", deliverables: deliverableTypes, rawAmount: campaign.compensation_amount || 0, rawReach: campaign.reach || 0, rawEngagement: campaign.engagement_rate || 0 }; }); } catch (error) { console.error('CampaignManager: Error processing campaigns:', error); return []; } }, [campaigns]); // Filter campaigns const filteredCampaigns = useMemo(() => { return processedCampaigns.filter(campaign => { const matchesSearch = campaign.title.toLowerCase().includes(searchTerm.toLowerCase()) || campaign.creator.toLowerCase().includes(searchTerm.toLowerCase()); const matchesStatus = statusFilter ==="all"|| campaign.status === statusFilter; const matchesTab = activeTab ==="all"|| (activeTab ==="active"&& ["pending","in_progress"].includes(campaign.status)) || (activeTab ==="completed"&& campaign.status ==="completed") || (activeTab ==="draft"&& campaign.status ==="draft"); return matchesSearch && matchesStatus && matchesTab; }); }, [processedCampaigns, searchTerm, statusFilter, activeTab]); const getStatusBadge = (status: string) => { const statusConfig = { completed: { label:"Completed", className:"bg-gray-100 text-gray-900"}, in_progress: { label:"In Progress", className:"bg-gray-100 text-gray-900"}, pending: { label:"Pending", className:"bg-gray-100 text-gray-900"}, rejected: { label:"Rejected", className:"bg-gray-100 text-gray-900"}, draft: { label:"Draft", className:"bg-gray-100 text-gray-800"} }; const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.pending; return <Badge className={config.className}>{config.label}</Badge>; }; const getPriorityIcon = (status: string) => { switch (status) { case 'completed': return <CheckCircle className="w-4 h-4 text-gray-700"/>; case 'in_progress': return <Clock className="w-4 h-4 text-gray-700"/>; case 'pending': return <AlertCircle className="w-4 h-4 text-gray-700"/>; default: return <Target className="w-4 h-4 text-gray-600"/>; } }; // Campaign stats const campaignStats = useMemo(() => { const total = processedCampaigns.length; const active = processedCampaigns.filter(c => ["pending","in_progress"].includes(c.status)).length; const completed = processedCampaigns.filter(c => c.status ==="completed").length; const totalBudget = processedCampaigns.reduce((sum, c) => sum + c.rawAmount, 0); const totalReach = processedCampaigns.reduce((sum, c) => sum + c.rawReach, 0); const avgEngagement = processedCampaigns.length > 0 ? processedCampaigns.reduce((sum, c) => sum + c.rawEngagement, 0) / processedCampaigns.length : 0; return { total, active, completed, totalBudget, totalReach, avgEngagement }; }, [processedCampaigns]); return ( <div className="space-y-8"> {/* Header */} <div className="flex flex-col sm:flex-row justify-between items-start sm:items-center gap-4"> <div> <h2 className="text-2xl font-semibold text-black">Campaign Management</h2> <p className="text-gray-500">Manage all your collaboration campaigns</p> </div> <div className="flex items-center space-x-2"> <Dialog> <DialogTrigger asChild> <Button className="bg-black hover:bg-gray-800 text-white rounded-full"> <Plus className="w-4 h-4 mr-2"/> New Campaign </Button> </DialogTrigger> <DialogContent> <DialogHeader> <DialogTitle>Create New Campaign</DialogTitle> <DialogDescription> Set up a new collaboration campaign with creators. </DialogDescription> </DialogHeader> <div className="p-4 text-center text-gray-500"> Campaign creation form would go here </div> </DialogContent> </Dialog> </div> </div> {/* Stats Overview */} <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6"> <Card className="p-6"> <div className="flex items-center justify-between"> <div> <p className="text-sm font-medium text-gray-600">Total Campaigns</p> <p className="text-2xl font-bold text-black">{campaignStats.total}</p> </div> <Target className="w-8 h-8 text-gray-400"/> </div> </Card> <Card className="p-6"> <div className="flex items-center justify-between"> <div> <p className="text-sm font-medium text-gray-600">Active</p> <p className="text-2xl font-bold text-gray-700">{campaignStats.active}</p> </div> <Clock className="w-8 h-8 text-gray-400"/> </div> </Card> <Card className="p-6"> <div className="flex items-center justify-between"> <div> <p className="text-sm font-medium text-gray-600">Completed</p> <p className="text-2xl font-bold text-gray-700">{campaignStats.completed}</p> </div> <CheckCircle className="w-8 h-8 text-gray-400"/> </div> </Card> <Card className="p-6"> <div className="flex items-center justify-between"> <div> <p className="text-sm font-medium text-gray-600">Total Budget</p> <p className="text-2xl font-bold text-black">{formatCurrency(campaignStats.totalBudget)}</p> </div> <TrendingUp className="w-8 h-8 text-gray-400"/> </div> </Card> </div> {/* Filters and Search */} <Card className="p-6"> <div className="flex flex-col sm:flex-row gap-4 mb-6"> <div className="flex-1"> <div className="relative"> <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4"/> <Input placeholder="Search campaigns or creators..."value={searchTerm} onChange={(e) => setSearchTerm(e.target.value)} className="pl-10"/> </div> </div> <Select value={statusFilter} onValueChange={setStatusFilter}> <SelectTrigger className="w-full sm:w-48"> <SelectValue placeholder="Filter by status"/> </SelectTrigger> <SelectContent> <SelectItem value="all">All Statuses</SelectItem> <SelectItem value="pending">Pending</SelectItem> <SelectItem value="in_progress">In Progress</SelectItem> <SelectItem value="completed">Completed</SelectItem> <SelectItem value="rejected">Rejected</SelectItem> <SelectItem value="draft">Draft</SelectItem> </SelectContent> </Select> </div> {/* Campaign Tabs */} <Tabs value={activeTab} onValueChange={setActiveTab}> <TabsList className="grid w-full grid-cols-4"> <TabsTrigger value="all">All ({processedCampaigns.length})</TabsTrigger> <TabsTrigger value="active">Active ({campaignStats.active})</TabsTrigger> <TabsTrigger value="completed">Completed ({campaignStats.completed})</TabsTrigger> <TabsTrigger value="draft">Drafts</TabsTrigger> </TabsList> <TabsContent value={activeTab} className="mt-6"> <div className="rounded border"> <Table> <TableHeader> <TableRow> <TableHead>Campaign</TableHead> <TableHead>Creator</TableHead> <TableHead>Status</TableHead> <TableHead>Budget</TableHead> <TableHead>Performance</TableHead> <TableHead>Timeline</TableHead> <TableHead className="text-right">Actions</TableHead> </TableRow> </TableHeader> <TableBody> {filteredCampaigns.length === 0 ? ( <TableRow> <TableCell colSpan={7} className="text-center py-8 text-gray-500"> No campaigns found matching your criteria </TableCell> </TableRow> ) : ( filteredCampaigns.map((campaign) => ( <TableRow key={campaign.id}> <TableCell> <div className="flex items-center space-x-3"> {getPriorityIcon(campaign.status)} <div> <p className="font-medium text-sm">{campaign.title}</p> <p className="text-xs text-gray-500">{campaign.deliverables}</p> </div> </div> </TableCell> <TableCell> <div> <p className="font-medium text-sm">{campaign.creator}</p> <p className="text-xs text-gray-500">@{campaign.creatorUsername}</p> </div> </TableCell> <TableCell>{getStatusBadge(campaign.status)}</TableCell> <TableCell className="font-medium">{campaign.budget}</TableCell> <TableCell> <div className="text-xs"> <p className="font-medium">{campaign.reach} reach</p> <p className="text-gray-500">{campaign.engagement} engagement</p> </div> </TableCell> <TableCell> <div className="text-xs"> <p>Start: {campaign.startDate}</p> <p className="text-gray-500">End: {campaign.endDate}</p> </div> </TableCell> <TableCell className="text-right"> <div className="flex items-center justify-end space-x-2"> <Button variant="ghost"size="sm"> <Eye className="w-4 h-4"/> </Button> <Button variant="ghost"size="sm"> <Edit className="w-4 h-4"/> </Button> <Button variant="ghost"size="sm"> <MoreHorizontal className="w-4 h-4"/> </Button> </div> </TableCell> </TableRow> )) )} </TableBody> </Table> </div> </TabsContent> </Tabs> </Card> </div> );
};