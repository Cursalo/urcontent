import React, { useState } from 'react';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Slider } from '@/components/ui/slider';
import { Checkbox } from '@/components/ui/checkbox';
import { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue,
} from '@/components/ui/select';
import { Sheet, SheetContent, SheetDescription, SheetHeader, SheetTitle, SheetTrigger,
} from '@/components/ui/sheet';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle,
} from '@/components/ui/dialog';
import { Separator } from '@/components/ui/separator';
import { toast } from 'sonner';
import { Search, Filter, MapPin, Users, TrendingUp, Star, Heart, MessageCircle, Eye, CheckCircle, Instagram, Youtube, Twitter, DollarSign, Calendar, BarChart3, Globe, Tag, Sparkles, ArrowUpDown, Grid, List, X
} from 'lucide-react';
import { cn } from '@/lib/utils'; // Datos mock de creators
const creatorsMock = [ { id: '1', nombre: 'María García', usuario: '@mariagarcia', avatar: '/api/placeholder/150/150', seguidores: 125000, engagement: 4.8, plataforma: 'Instagram', categoria: 'Lifestyle', ubicacion: 'Ciudad de México', tarifa: 8000, verificado: true, disponible: true, tags: ['moda', 'belleza', 'lifestyle', 'viajes'], audiencia: { genero: { mujeres: 75, hombres: 25 }, edad: { '18-24': 35, '25-34': 45, '35-44': 15, '45+': 5 }, ubicaciones: ['México 65%', 'USA 15%', 'España 10%', 'Otros 10%'] }, metricas: { alcancePromedio: 95000, impresionesPromedio: 180000, campanasCompletadas: 12, tasaRespuesta: 92 } }, { id: '2', nombre: 'Carlos López', usuario: '@carlosfit', avatar: '/api/placeholder/150/150', seguidores: 98000, engagement: 5.2, plataforma: 'TikTok', categoria: 'Fitness', ubicacion: 'Guadalajara', tarifa: 6500, verificado: true, disponible: true, tags: ['fitness', 'salud', 'deportes', 'nutrición'], audiencia: { genero: { mujeres: 40, hombres: 60 }, edad: { '18-24': 25, '25-34': 50, '35-44': 20, '45+': 5 }, ubicaciones: ['México 70%', 'Colombia 10%', 'Argentina 10%', 'Otros 10%'] }, metricas: { alcancePromedio: 85000, impresionesPromedio: 150000, campanasCompletadas: 8, tasaRespuesta: 88 } }, { id: '3', nombre: 'Ana Martínez', usuario: '@anafoodie', avatar: '/api/placeholder/150/150', seguidores: 87000, engagement: 6.1, plataforma: 'Instagram', categoria: 'Gastronomía', ubicacion: 'Monterrey', tarifa: 5500, verificado: true, disponible: false, tags: ['comida', 'restaurantes', 'recetas', 'foodie'], audiencia: { genero: { mujeres: 65, hombres: 35 }, edad: { '18-24': 20, '25-34': 40, '35-44': 30, '45+': 10 }, ubicaciones: ['México 80%', 'USA 10%', 'Canadá 5%', 'Otros 5%'] }, metricas: { alcancePromedio: 75000, impresionesPromedio: 120000, campanasCompletadas: 15, tasaRespuesta: 95 } }
]; const BusquedaCreators: React.FC = () => { const [busqueda, setBusqueda] = useState(''); const [vistaActiva, setVistaActiva] = useState<'grid' | 'lista'>('grid'); const [filtrosAbiertos, setFiltrosAbiertos] = useState(false); const [creatorSeleccionado, setCreatorSeleccionado] = useState<any>(null); const [comparando, setComparando] = useState<string[]>([]); const [favoritos, setFavoritos] = useState<string[]>([]); // Filtros const [filtros, setFiltros] = useState({ plataforma: 'todas', categoria: 'todas', ubicacion: '', seguidoresMin: 0, seguidoresMax: 1000000, engagementMin: 0, tarifaMax: 50000, verificado: false, disponible: false }); // Formatear números const formatNumber = (num: number) => { if (num >= 1000000) return `${(num / 1000000).toFixed(1)}M`; if (num >= 1000) return `${(num / 1000).toFixed(1)}k`; return num.toString(); }; // Formatear moneda const formatCurrency = (amount: number) => { return new Intl.NumberFormat('es-MX', { style: 'currency', currency: 'MXN', minimumFractionDigits: 0 }).format(amount); }; // Obtener icono de plataforma const getPlatformIcon = (platform: string) => { switch (platform) { case 'Instagram': return <Instagram className="w-4 h-4"/>; case 'TikTok': return <svg className="w-4 h-4"viewBox="0 0 24 24"fill="currentColor"> <path d="M19.59 6.69a4.83 4.83 0 0 1-3.77-4.25V2h-3.45v13.67a2.89 2.89 0 0 1-5.2 1.74 2.89 2.89 0 0 1 2.31-4.64 2.93 2.93 0 0 1 .88.13V9.4a6.34 6.34 0 0 0-1-.05A6.33 6.33 0 0 0 5 20.1a6.34 6.34 0 0 0 10.86-4.43v-7a8.16 8.16 0 0 0 4.77 1.52v-3.4a4.85 4.85 0 0 1-1-.1z"/> </svg>; case 'YouTube': return <Youtube className="w-4 h-4"/>; default: return <Globe className="w-4 h-4"/>; } }; // Togglear favorito const toggleFavorito = (creatorId: string) => { setFavoritos(prev => prev.includes(creatorId) ? prev.filter(id => id !== creatorId) : [...prev, creatorId] ); toast.success( favoritos.includes(creatorId) ? 'Eliminado de favoritos' : 'Agregado a favoritos' ); }; // Togglear comparación const toggleComparacion = (creatorId: string) => { if (comparando.includes(creatorId)) { setComparando(prev => prev.filter(id => id !== creatorId)); } else if (comparando.length < 3) { setComparando(prev => [...prev, creatorId]); } else { toast.error('Máximo 3 creators para comparar'); } }; // Renderizar tarjeta de creator const CreatorCard = ({ creator }: { creator: any }) => ( <Card className={cn("bg-white border border-gray-200 rounded hover:border-gray-300 transition-all duration-300 hover:shadow-lg relative overflow-hidden", comparando.includes(creator.id) &&"ring-2 ring-blue-500")}> {/* Badge de disponibilidad */} <div className="absolute top-4 right-4 z-10"> <Badge variant={creator.disponible ?"default":"secondary"}> {creator.disponible ? 'Disponible' : 'No disponible'} </Badge> </div> <CardContent className="p-6"> {/* Header del creator */} <div className="flex items-start space-x-4 mb-4"> <Avatar className="w-16 h-16"> <AvatarImage src={creator.avatar} /> <AvatarFallback>{creator.nombre.charAt(0)}</AvatarFallback> </Avatar> <div className="flex-1"> <div className="flex items-center space-x-2"> <h3 className="font-semibold text-gray-900">{creator.nombre}</h3> {creator.verificado && ( <CheckCircle className="w-4 h-4 text-gray-500"/> )} </div> <p className="text-sm text-gray-500">{creator.usuario}</p> <div className="flex items-center space-x-2 mt-1"> {getPlatformIcon(creator.plataforma)} <span className="text-xs text-gray-500">{creator.plataforma}</span> <span className="text-xs text-gray-400">•</span> <span className="text-xs text-gray-500">{creator.categoria}</span> </div> </div> </div> {/* Métricas principales */} <div className="grid grid-cols-2 gap-4 mb-4"> <div className="text-center p-3 bg-gray-50 rounded"> <p className="text-2xl font-bold text-gray-900">{formatNumber(creator.seguidores)}</p> <p className="text-xs text-gray-500">Seguidores</p> </div> <div className="text-center p-3 bg-gray-50 rounded"> <p className="text-2xl font-bold text-gray-900">{creator.engagement}%</p> <p className="text-xs text-gray-500">Engagement</p> </div> </div> {/* Tags */} <div className="flex flex-wrap gap-2 mb-4"> {creator.tags.slice(0, 3).map((tag: string) => ( <Badge key={tag} variant="outline"className="text-xs"> {tag} </Badge> ))} {creator.tags.length > 3 && ( <Badge variant="outline"className="text-xs"> +{creator.tags.length - 3} </Badge> )} </div> {/* Ubicación y tarifa */} <div className="flex items-center justify-between mb-4"> <div className="flex items-center space-x-1 text-sm text-gray-500"> <MapPin className="w-3 h-3"/> <span>{creator.ubicacion}</span> </div> <div className="text-right"> <p className="text-lg font-semibold text-gray-900">{formatCurrency(creator.tarifa)}</p> <p className="text-xs text-gray-500">por publicación</p> </div> </div> {/* Acciones */} <div className="flex items-center space-x-2"> <Button className="flex-1 bg-black hover:bg-gray-800 text-white rounded-full"onClick={() => setCreatorSeleccionado(creator)} > Ver Perfil </Button> <Button variant="outline"size="icon"className="rounded-full"onClick={() => toggleFavorito(creator.id)} > <Heart className={cn("w-4 h-4", favoritos.includes(creator.id) &&"fill-red-500 text-gray-500")} /> </Button> <Button variant="outline"size="icon"className="rounded-full"onClick={() => toggleComparacion(creator.id)} > <BarChart3 className={cn("w-4 h-4", comparando.includes(creator.id) &&"text-gray-500")} /> </Button> </div> </CardContent> </Card> ); return ( <div className="space-y-6"> {/* Header */} <div className="flex items-center justify-between"> <div> <h2 className="text-2xl font-light text-gray-900">Buscar Creators</h2> <p className="text-gray-500 mt-1">Encuentra los mejores creators para tus campañas</p> </div> <div className="flex items-center space-x-3"> {comparando.length > 0 && ( <Button variant="outline"className="rounded-full"onClick={() => toast.info('Función de comparación en desarrollo')} > Comparar ({comparando.length}) </Button> )} <Tabs value={vistaActiva} onValueChange={(v) => setVistaActiva(v as any)}> <TabsList> <TabsTrigger value="grid"> <Grid className="w-4 h-4"/> </TabsTrigger> <TabsTrigger value="lista"> <List className="w-4 h-4"/> </TabsTrigger> </TabsList> </Tabs> </div> </div> {/* Barra de búsqueda y filtros */} <div className="flex items-center space-x-4"> <div className="flex-1 relative"> <Search className="absolute left-3 top-1/2 -translate-y-1/2 w-5 h-5 text-gray-400"/> <Input placeholder="Buscar por nombre, usuario o tags..."value={busqueda} onChange={(e) => setBusqueda(e.target.value)} className="pl-10 pr-4 py-6 text-base rounded"/> </div> <Sheet open={filtrosAbiertos} onOpenChange={setFiltrosAbiertos}> <SheetTrigger asChild> <Button variant="outline"className="rounded-full h-12 px-6"> <Filter className="w-4 h-4 mr-2"/> Filtros </Button> </SheetTrigger> <SheetContent className="w-[400px]"> <SheetHeader> <SheetTitle>Filtros de Búsqueda</SheetTitle> <SheetDescription> Refina tu búsqueda de creators </SheetDescription> </SheetHeader> <div className="space-y-6 py-6"> {/* Plataforma */} <div className="space-y-2"> <Label>Plataforma</Label> <Select value={filtros.plataforma} onValueChange={(v) => setFiltros({...filtros, plataforma: v})}> <SelectTrigger> <SelectValue /> </SelectTrigger> <SelectContent> <SelectItem value="todas">Todas las plataformas</SelectItem> <SelectItem value="instagram">Instagram</SelectItem> <SelectItem value="tiktok">TikTok</SelectItem> <SelectItem value="youtube">YouTube</SelectItem> <SelectItem value="twitter">Twitter</SelectItem> </SelectContent> </Select> </div> {/* Categoría */} <div className="space-y-2"> <Label>Categoría</Label> <Select value={filtros.categoria} onValueChange={(v) => setFiltros({...filtros, categoria: v})}> <SelectTrigger> <SelectValue /> </SelectTrigger> <SelectContent> <SelectItem value="todas">Todas las categorías</SelectItem> <SelectItem value="lifestyle">Lifestyle</SelectItem> <SelectItem value="fitness">Fitness</SelectItem> <SelectItem value="gastronomia">Gastronomía</SelectItem> <SelectItem value="tecnologia">Tecnología</SelectItem> <SelectItem value="viajes">Viajes</SelectItem> <SelectItem value="moda">Moda</SelectItem> <SelectItem value="belleza">Belleza</SelectItem> </SelectContent> </Select> </div> {/* Seguidores */} <div className="space-y-2"> <Label>Rango de Seguidores</Label> <div className="flex items-center space-x-4"> <Input type="number"placeholder="Mín"value={filtros.seguidoresMin} onChange={(e) => setFiltros({...filtros, seguidoresMin: parseInt(e.target.value) || 0})} /> <span className="text-gray-500">-</span> <Input type="number"placeholder="Máx"value={filtros.seguidoresMax} onChange={(e) => setFiltros({...filtros, seguidoresMax: parseInt(e.target.value) || 1000000})} /> </div> </div> {/* Engagement mínimo */} <div className="space-y-2"> <Label>Engagement Mínimo: {filtros.engagementMin}%</Label> <Slider value={[filtros.engagementMin]} onValueChange={(v) => setFiltros({...filtros, engagementMin: v[0]})} max={10} step={0.1} /> </div> {/* Tarifa máxima */} <div className="space-y-2"> <Label>Tarifa Máxima: {formatCurrency(filtros.tarifaMax)}</Label> <Slider value={[filtros.tarifaMax]} onValueChange={(v) => setFiltros({...filtros, tarifaMax: v[0]})} max={50000} step={1000} /> </div> {/* Ubicación */} <div className="space-y-2"> <Label>Ubicación</Label> <Input placeholder="Ciudad o país..."value={filtros.ubicacion} onChange={(e) => setFiltros({...filtros, ubicacion: e.target.value})} /> </div> {/* Checkboxes */} <div className="space-y-3"> <div className="flex items-center space-x-2"> <Checkbox id="verificado"checked={filtros.verificado} onCheckedChange={(checked) => setFiltros({...filtros, verificado: checked as boolean})} /> <label htmlFor="verificado"className="text-sm font-medium"> Solo verificados </label> </div> <div className="flex items-center space-x-2"> <Checkbox id="disponible"checked={filtros.disponible} onCheckedChange={(checked) => setFiltros({...filtros, disponible: checked as boolean})} /> <label htmlFor="disponible"className="text-sm font-medium"> Solo disponibles </label> </div> </div> </div> <div className="flex items-center space-x-3"> <Button variant="outline"className="flex-1"onClick={() => { setFiltros({ plataforma: 'todas', categoria: 'todas', ubicacion: '', seguidoresMin: 0, seguidoresMax: 1000000, engagementMin: 0, tarifaMax: 50000, verificado: false, disponible: false }); }} > Limpiar </Button> <Button className="flex-1 bg-black hover:bg-gray-800 text-white"onClick={() => { setFiltrosAbiertos(false); toast.success('Filtros aplicados'); }} > Aplicar </Button> </div> </SheetContent> </Sheet> <Select defaultValue="relevancia"> <SelectTrigger className="w-48 h-12 rounded-full"> <div className="flex items-center"> <ArrowUpDown className="w-4 h-4 mr-2"/> <SelectValue /> </div> </SelectTrigger> <SelectContent> <SelectItem value="relevancia">Más relevantes</SelectItem> <SelectItem value="seguidores">Mayor alcance</SelectItem> <SelectItem value="engagement">Mayor engagement</SelectItem> <SelectItem value="tarifa-baja">Menor tarifa</SelectItem> <SelectItem value="tarifa-alta">Mayor tarifa</SelectItem> </SelectContent> </Select> </div> {/* Chips de filtros activos */} <div className="flex items-center space-x-2"> <span className="text-sm text-gray-500">Filtros activos:</span> {filtros.verificado && ( <Badge variant="secondary"className="rounded-full"> Verificados <X className="w-3 h-3 ml-1 cursor-pointer"onClick={() => setFiltros({...filtros, verificado: false})} /> </Badge> )} {filtros.disponible && ( <Badge variant="secondary"className="rounded-full"> Disponibles <X className="w-3 h-3 ml-1 cursor-pointer"onClick={() => setFiltros({...filtros, disponible: false})} /> </Badge> )} {filtros.plataforma !== 'todas' && ( <Badge variant="secondary"className="rounded-full"> {filtros.plataforma} <X className="w-3 h-3 ml-1 cursor-pointer"onClick={() => setFiltros({...filtros, plataforma: 'todas'})} /> </Badge> )} </div> {/* Resultados */} <div> <div className="flex items-center justify-between mb-4"> <p className="text-sm text-gray-500"> {creatorsMock.length} creators encontrados </p> <Button variant="ghost"size="sm"className="text-gray-700"> <Sparkles className="w-4 h-4 mr-2"/> Sugerencias personalizadas </Button> </div> {/* Vista Grid */} {vistaActiva === 'grid' && ( <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"> {creatorsMock.map((creator) => ( <CreatorCard key={creator.id} creator={creator} /> ))} </div> )} {/* Vista Lista */} {vistaActiva === 'lista' && ( <Card> <CardContent className="p-0"> <div className="overflow-x-auto"> <table className="w-full"> <thead className="bg-gray-50 border-b"> <tr> <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"> Creator </th> <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"> Plataforma </th> <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"> Seguidores </th> <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"> Engagement </th> <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"> Tarifa </th> <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"> Estado </th> <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider"> Acciones </th> </tr> </thead> <tbody className="bg-white divide-y divide-gray-200"> {creatorsMock.map((creator) => ( <tr key={creator.id} className="hover:bg-gray-50"> <td className="px-6 py-4 whitespace-nowrap"> <div className="flex items-center space-x-3"> <Avatar> <AvatarImage src={creator.avatar} /> <AvatarFallback>{creator.nombre.charAt(0)}</AvatarFallback> </Avatar> <div> <div className="flex items-center space-x-2"> <p className="text-sm font-medium text-gray-900">{creator.nombre}</p> {creator.verificado && ( <CheckCircle className="w-4 h-4 text-gray-500"/> )} </div> <p className="text-xs text-gray-500">{creator.usuario}</p> </div> </div> </td> <td className="px-6 py-4 whitespace-nowrap"> <div className="flex items-center space-x-2"> {getPlatformIcon(creator.plataforma)} <span className="text-sm text-gray-600">{creator.plataforma}</span> </div> </td> <td className="px-6 py-4 whitespace-nowrap"> <p className="text-sm font-medium text-gray-900">{formatNumber(creator.seguidores)}</p> </td> <td className="px-6 py-4 whitespace-nowrap"> <div className="flex items-center space-x-1"> <TrendingUp className="w-4 h-4 text-gray-500"/> <span className="text-sm font-medium text-gray-900">{creator.engagement}%</span> </div> </td> <td className="px-6 py-4 whitespace-nowrap"> <p className="text-sm font-medium text-gray-900">{formatCurrency(creator.tarifa)}</p> </td> <td className="px-6 py-4 whitespace-nowrap"> <Badge variant={creator.disponible ?"default":"secondary"}> {creator.disponible ? 'Disponible' : 'No disponible'} </Badge> </td> <td className="px-6 py-4 whitespace-nowrap"> <div className="flex items-center space-x-2"> <Button variant="ghost"size="sm"onClick={() => setCreatorSeleccionado(creator)}> Ver perfil </Button> <Button variant="ghost"size="icon"onClick={() => toggleFavorito(creator.id)} > <Heart className={cn("w-4 h-4", favoritos.includes(creator.id) &&"fill-red-500 text-gray-500")} /> </Button> </div> </td> </tr> ))} </tbody> </table> </div> </CardContent> </Card> )} </div> {/* Modal de perfil del creator */} <Dialog open={!!creatorSeleccionado} onOpenChange={() => setCreatorSeleccionado(null)}> <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto"> {creatorSeleccionado && ( <> <DialogHeader> <div className="flex items-start space-x-4"> <Avatar className="w-20 h-20"> <AvatarImage src={creatorSeleccionado.avatar} /> <AvatarFallback>{creatorSeleccionado.nombre.charAt(0)}</AvatarFallback> </Avatar> <div className="flex-1"> <div className="flex items-center space-x-2"> <DialogTitle className="text-2xl">{creatorSeleccionado.nombre}</DialogTitle> {creatorSeleccionado.verificado && ( <CheckCircle className="w-5 h-5 text-gray-500"/> )} </div> <p className="text-gray-500">{creatorSeleccionado.usuario}</p> <div className="flex items-center space-x-4 mt-2"> <div className="flex items-center space-x-1"> {getPlatformIcon(creatorSeleccionado.plataforma)} <span className="text-sm">{creatorSeleccionado.plataforma}</span> </div> <Badge variant="outline">{creatorSeleccionado.categoria}</Badge> <div className="flex items-center space-x-1 text-sm text-gray-500"> <MapPin className="w-3 h-3"/> <span>{creatorSeleccionado.ubicacion}</span> </div> </div> </div> <div className="text-right"> <p className="text-2xl font-bold">{formatCurrency(creatorSeleccionado.tarifa)}</p> <p className="text-sm text-gray-500">por publicación</p> </div> </div> </DialogHeader> <Tabs defaultValue="metricas"className="mt-6"> <TabsList className="grid w-full grid-cols-3"> <TabsTrigger value="metricas">Métricas</TabsTrigger> <TabsTrigger value="audiencia">Audiencia</TabsTrigger> <TabsTrigger value="contenido">Contenido</TabsTrigger> </TabsList> <TabsContent value="metricas"className="space-y-6"> <div className="grid grid-cols-2 md:grid-cols-4 gap-4"> <Card> <CardContent className="p-4 text-center"> <Users className="w-8 h-8 mx-auto mb-2 text-gray-500"/> <p className="text-2xl font-bold">{formatNumber(creatorSeleccionado.seguidores)}</p> <p className="text-xs text-gray-500">Seguidores</p> </CardContent> </Card> <Card> <CardContent className="p-4 text-center"> <TrendingUp className="w-8 h-8 mx-auto mb-2 text-gray-500"/> <p className="text-2xl font-bold">{creatorSeleccionado.engagement}%</p> <p className="text-xs text-gray-500">Engagement</p> </CardContent> </Card> <Card> <CardContent className="p-4 text-center"> <Eye className="w-8 h-8 mx-auto mb-2 text-gray-500"/> <p className="text-2xl font-bold">{formatNumber(creatorSeleccionado.metricas.alcancePromedio)}</p> <p className="text-xs text-gray-500">Alcance Promedio</p> </CardContent> </Card> <Card> <CardContent className="p-4 text-center"> <CheckCircle className="w-8 h-8 mx-auto mb-2 text-gray-500"/> <p className="text-2xl font-bold">{creatorSeleccionado.metricas.campanasCompletadas}</p> <p className="text-xs text-gray-500">Campañas</p> </CardContent> </Card> </div> <Card> <CardHeader> <CardTitle className="text-lg">Rendimiento</CardTitle> </CardHeader> <CardContent className="space-y-3"> <div className="flex items-center justify-between"> <span className="text-sm text-gray-500">Tasa de respuesta</span> <span className="text-sm font-medium">{creatorSeleccionado.metricas.tasaRespuesta}%</span> </div> <div className="flex items-center justify-between"> <span className="text-sm text-gray-500">Impresiones promedio</span> <span className="text-sm font-medium">{formatNumber(creatorSeleccionado.metricas.impresionesPromedio)}</span> </div> </CardContent> </Card> </TabsContent> <TabsContent value="audiencia"className="space-y-6"> <div className="grid grid-cols-1 md:grid-cols-2 gap-6"> <Card> <CardHeader> <CardTitle className="text-lg">Distribución por Género</CardTitle> </CardHeader> <CardContent> <div className="space-y-3"> <div className="flex items-center justify-between"> <span className="text-sm">Mujeres</span> <div className="flex items-center space-x-2"> <div className="w-32 bg-gray-200 rounded-full h-2"> <div className="bg-gray-500 h-2 rounded-full"style={{ width: `${creatorSeleccionado.audiencia.genero.mujeres}%` }} /> </div> <span className="text-sm font-medium">{creatorSeleccionado.audiencia.genero.mujeres}%</span> </div> </div> <div className="flex items-center justify-between"> <span className="text-sm">Hombres</span> <div className="flex items-center space-x-2"> <div className="w-32 bg-gray-200 rounded-full h-2"> <div className="bg-gray-500 h-2 rounded-full"style={{ width: `${creatorSeleccionado.audiencia.genero.hombres}%` }} /> </div> <span className="text-sm font-medium">{creatorSeleccionado.audiencia.genero.hombres}%</span> </div> </div> </div> </CardContent> </Card> <Card> <CardHeader> <CardTitle className="text-lg">Rango de Edad</CardTitle> </CardHeader> <CardContent> <div className="space-y-3"> {Object.entries(creatorSeleccionado.audiencia.edad).map(([rango, porcentaje]) => ( <div key={rango} className="flex items-center justify-between"> <span className="text-sm">{rango}</span> <div className="flex items-center space-x-2"> <div className="w-32 bg-gray-200 rounded-full h-2"> <div className="bg-gray-500 h-2 rounded-full"style={{ width: `${porcentaje}%` }} /> </div> <span className="text-sm font-medium">{porcentaje}%</span> </div> </div> ))} </div> </CardContent> </Card> </div> <Card> <CardHeader> <CardTitle className="text-lg">Ubicaciones Principales</CardTitle> </CardHeader> <CardContent> <div className="flex flex-wrap gap-2"> {creatorSeleccionado.audiencia.ubicaciones.map((ubicacion: string) => ( <Badge key={ubicacion} variant="secondary"> {ubicacion} </Badge> ))} </div> </CardContent> </Card> </TabsContent> <TabsContent value="contenido"className="space-y-6"> <Card> <CardHeader> <CardTitle className="text-lg">Tags de Contenido</CardTitle> </CardHeader> <CardContent> <div className="flex flex-wrap gap-2"> {creatorSeleccionado.tags.map((tag: string) => ( <Badge key={tag} variant="outline"> <Tag className="w-3 h-3 mr-1"/> {tag} </Badge> ))} </div> </CardContent> </Card> <div className="text-center py-8"> <p className="text-gray-500 mb-4">Vista previa del contenido disponible próximamente</p> <Button variant="outline"disabled> Ver Portfolio </Button> </div> </TabsContent> </Tabs> <DialogFooter className="mt-6"> <Button variant="outline"onClick={() => setCreatorSeleccionado(null)}> Cerrar </Button> <Button className="bg-black hover:bg-gray-800 text-white"onClick={() => { toast.success('Invitación enviada al creator'); setCreatorSeleccionado(null); }} > <MessageCircle className="w-4 h-4 mr-2"/> Contactar Creator </Button> </DialogFooter> </> )} </DialogContent> </Dialog> </div> );
}; export default BusquedaCreators;