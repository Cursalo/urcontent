import React, { useState, memo, useCallback } from 'react';
import { Link } from 'react-router-dom';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { useAuth } from '@/contexts/AuthContext';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';
import { Eye, EyeOff, Loader2, User, Building2 } from 'lucide-react';
import { passwordSchema, emailSchema } from '@/lib/validation'; // Enhanced form validation schema
const registerSchema = z.object({ full_name: z.string() .min(2,"El nombre debe tener al menos 2 caracteres") .max(100,"El nombre no puede exceder 100 caracteres") .regex(/^[a-zA-ZÀ-ÿ\s]+$/,"El nombre solo puede contener letras y espacios"), email: emailSchema, password: passwordSchema, confirmPassword: z.string() .min(1,"Confirma tu contraseña"), role: z.enum(['creator', 'business'])
}).refine((data) => data.password === data.confirmPassword, { message:"Las contraseñas no coinciden", path: ["confirmPassword"]
}); type RegisterFormData = z.infer<typeof registerSchema>; interface RegisterFormProps { onSuccess?: () => void;
} export const RegisterForm: React.FC<RegisterFormProps> = memo(({ onSuccess }) => { const { signUp } = useAuth(); const [showPassword, setShowPassword] = useState(false); const [showConfirmPassword, setShowConfirmPassword] = useState(false); const [error, setError] = useState(''); const [success, setSuccess] = useState(false); const form = useForm<RegisterFormData>({ resolver: zodResolver(registerSchema), defaultValues: { full_name: '', email: '', password: '', confirmPassword: '', role: 'creator' } }); const { handleSubmit, formState: { isSubmitting }, watch } = form; const watchedRole = watch('role'); const onSubmit = useCallback(async (data: RegisterFormData) => { setError(''); try { const { error } = await signUp(data.email, data.password, { full_name: data.full_name, role: data.role, }); if (error) { setError(error.message); } else { setSuccess(true); setTimeout(() => { onSuccess?.(); }, 2000); } } catch (err) { setError('An unexpected error occurred'); } }, [signUp, onSuccess]); const togglePasswordVisibility = useCallback(() => { setShowPassword(prev => !prev); }, []); const toggleConfirmPasswordVisibility = useCallback(() => { setShowConfirmPassword(prev => !prev); }, []); if (success) { return ( <Card className="w-full max-w-md mx-auto bg-white border border-gray-100 rounded shadow-xl shadow-black/5"> <CardHeader className="pt-12 pb-8"> <div className="w-16 h-16 bg-gray-100 rounded flex items-center justify-center mx-auto mb-6"> <svg className="w-8 h-8 text-gray-700"fill="none"stroke="currentColor"viewBox="0 0 24 24"> <path strokeLinecap="round"strokeLinejoin="round"strokeWidth={2} d="M5 13l4 4L19 7"/> </svg> </div> <CardTitle className="text-3xl font-light text-center text-black mb-4"> ¡Registro <span className="font-semibold">exitoso!</span> </CardTitle> <CardDescription className="text-center text-gray-600 leading-relaxed"> Hemos enviado un email de confirmación a tu dirección de correo. Por favor verifica tu cuenta antes de iniciar sesión. </CardDescription> </CardHeader> <CardFooter className="px-8 pb-12"> <Button asChild className="w-full h-12 bg-black hover:bg-gray-800 text-white rounded font-medium transition-all duration-300 hover:scale-105"> <Link to="/login">Ir a Iniciar Sesión</Link> </Button> </CardFooter> </Card> ); } return ( <Card className="w-full max-w-md mx-auto bg-white border border-gray-100 rounded shadow-xl shadow-black/5"> <CardHeader className="space-y-6 pt-12 pb-8"> </CardHeader> <Form {...form}> <form onSubmit={handleSubmit(onSubmit)}> <CardContent className="space-y-6 px-8"> {error && ( <Alert variant="destructive"> <AlertDescription>{error}</AlertDescription> </Alert> )} <FormField control={form.control} name="role"render={({ field }) => ( <FormItem className="space-y-4"> <FormLabel className="text-sm font-medium text-black">¿Qué tipo de cuenta quieres crear?</FormLabel> <FormControl> <RadioGroup value={field.value} onValueChange={field.onChange} className="flex flex-col space-y-3"> <div className="flex items-center space-x-3 p-4 border border-gray-200 rounded hover:border-gray-300 hover:bg-gray-50 transition-all"> <RadioGroupItem value="creator"id="creator"className="data-[state=checked]:bg-black data-[state=checked]:border-black"/> <Label htmlFor="creator"className="flex items-center space-x-3 cursor-pointer flex-1"> <div className="w-10 h-10 bg-black/5 rounded flex items-center justify-center"> <User className="h-5 w-5 text-black/70"/> </div> <div> <div className="font-medium text-black">Soy Creador</div> <div className="text-sm text-gray-600"> Influencer, content creator, artista </div> </div> </Label> </div> <div className="flex items-center space-x-3 p-4 border border-gray-200 rounded hover:border-gray-300 hover:bg-gray-50 transition-all"> <RadioGroupItem value="business"id="business"className="data-[state=checked]:bg-black data-[state=checked]:border-black"/> <Label htmlFor="business"className="flex items-center space-x-3 cursor-pointer flex-1"> <div className="w-10 h-10 bg-black/5 rounded flex items-center justify-center"> <Building2 className="h-5 w-5 text-black/70"/> </div> <div> <div className="font-medium text-black">Soy una Empresa</div> <div className="text-sm text-gray-600"> Marca, agencia, comercio </div> </div> </Label> </div> </RadioGroup> </FormControl> <FormMessage /> </FormItem> )} /> <FormField control={form.control} name="full_name"render={({ field }) => ( <FormItem className="space-y-3"> <FormLabel className="text-sm font-medium text-black">Nombre Completo</FormLabel> <FormControl> <Input {...field} type="text"placeholder="Tu nombre completo"disabled={isSubmitting} className="h-12 rounded border-gray-200 focus:border-black focus:ring-black text-base"/> </FormControl> <FormMessage /> </FormItem> )} /> <FormField control={form.control} name="email"render={({ field }) => ( <FormItem className="space-y-3"> <FormLabel className="text-sm font-medium text-black">Email</FormLabel> <FormControl> <Input {...field} type="email"placeholder="tu@email.com"disabled={isSubmitting} className="h-12 rounded border-gray-200 focus:border-black focus:ring-black text-base"/> </FormControl> <FormMessage /> </FormItem> )} /> <FormField control={form.control} name="password"render={({ field }) => ( <FormItem className="space-y-3"> <FormLabel className="text-sm font-medium text-black">Contraseña</FormLabel> <FormControl> <div className="relative"> <Input {...field} type={showPassword ? 'text' : 'password'} placeholder="••••••••"disabled={isSubmitting} className="h-12 rounded border-gray-200 focus:border-black focus:ring-black text-base pr-12"/> <Button type="button"variant="ghost"size="sm"className="absolute right-0 top-0 h-12 px-4 hover:bg-transparent rounded-r-2xl"onClick={togglePasswordVisibility} disabled={isSubmitting} > {showPassword ? ( <EyeOff className="h-4 w-4 text-gray-400"/> ) : ( <Eye className="h-4 w-4 text-gray-400"/> )} </Button> </div> </FormControl> <FormMessage /> </FormItem> )} /> <FormField control={form.control} name="confirmPassword"render={({ field }) => ( <FormItem className="space-y-3"> <FormLabel className="text-sm font-medium text-black">Confirmar Contraseña</FormLabel> <FormControl> <div className="relative"> <Input {...field} type={showConfirmPassword ? 'text' : 'password'} placeholder="••••••••"disabled={isSubmitting} className="h-12 rounded border-gray-200 focus:border-black focus:ring-black text-base pr-12"/> <Button type="button"variant="ghost"size="sm"className="absolute right-0 top-0 h-12 px-4 hover:bg-transparent rounded-r-2xl"onClick={toggleConfirmPasswordVisibility} disabled={isSubmitting} > {showConfirmPassword ? ( <EyeOff className="h-4 w-4 text-gray-400"/> ) : ( <Eye className="h-4 w-4 text-gray-400"/> )} </Button> </div> </FormControl> <FormMessage /> </FormItem> )} /> </CardContent> <CardFooter className="flex flex-col space-y-6 px-8 pb-12"> <Button type="submit"className="w-full h-12 bg-black hover:bg-gray-800 text-white rounded font-medium text-base transition-all duration-300 hover:scale-105"disabled={isSubmitting} > {isSubmitting && <Loader2 className="mr-2 h-4 w-4 animate-spin"/>} Crear Cuenta </Button> <div className="text-center text-sm text-gray-600"> ¿Ya tienes cuenta?{' '} <Link to="/login"className="text-black font-medium hover:underline transition-colors"> Inicia sesión aquí </Link> </div> </CardFooter> </form> </Form> </Card> );
}); RegisterForm.displayName ="RegisterForm";