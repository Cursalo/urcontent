import { useState } from"react";
import { useQuery, useMutation, useQueryClient } from"@tanstack/react-query";
import { Button } from"@/components/ui/button";
import { Input } from"@/components/ui/input";
import { Label } from"@/components/ui/label";
import { Textarea } from"@/components/ui/textarea";
import { Badge } from"@/components/ui/badge";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from"@/components/ui/card";
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from"@/components/ui/dialog";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from"@/components/ui/select";
import { Tabs, TabsContent, TabsList, TabsTrigger } from"@/components/ui/tabs";
import { Switch } from"@/components/ui/switch";
import { Calendar } from"@/components/ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from"@/components/ui/popover";
import { offersService, reservationsService, type Offer, type OfferFilters } from"@/services";
import { toast } from"sonner";
import { Plus, Edit, Trash2, Eye, Calendar as CalendarIcon, Clock, Users, CreditCard, Star, TrendingUp, BarChart3, Settings, Copy, Pause, Play, AlertCircle, CheckCircle, Upload, X, DollarSign, MapPin, Tag
} from"lucide-react";
import { format } from"date-fns";
import { es } from"date-fns/locale"; interface OfferManagerProps { venueId: string;
} export const OfferManager = ({ venueId }: OfferManagerProps) => { const [selectedOffer, setSelectedOffer] = useState<Offer | null>(null); const [isCreateModalOpen, setIsCreateModalOpen] = useState(false); const [isEditModalOpen, setIsEditModalOpen] = useState(false); const [viewMode, setViewMode] = useState<'grid' | 'list'>('grid'); const [filterStatus, setFilterStatus] = useState<string>('all'); const [filterTier, setFilterTier] = useState<string>('all'); const queryClient = useQueryClient(); // Fetch offers for the venue const { data: offers = [], isLoading, error } = useQuery({ queryKey: ['venue-offers', venueId], queryFn: () => offersService.getOffers({ venue_id: venueId }), enabled: !!venueId }); // Get offer stats const { data: offerStats } = useQuery({ queryKey: ['offer-stats', venueId], queryFn: () => offersService.getOfferStats({ venue_id: venueId }), enabled: !!venueId }); // Create offer mutation const createOfferMutation = useMutation({ mutationFn: (offerData: any) => offersService.createOffer({ venue_id: venueId, title: offerData.title, description: offerData.description, credit_cost: offerData.credits, original_value: offerData.originalValue, duration_minutes: offerData.duration, membership_tier: offerData.membershipTier, status: offerData.status || 'active', available_days: ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday'], available_times: offerData.availableSlots || [], max_guests: offerData.maxGuests || 1, special_requirements: offerData.specialRequirements, terms_and_conditions: offerData.termsAndConditions, cancellation_hours: offerData.bookingWindow ? offerData.bookingWindow * 24 : 24, }), onSuccess: () => { queryClient.invalidateQueries({ queryKey: ['venue-offers', venueId] }); queryClient.invalidateQueries({ queryKey: ['offer-stats', venueId] }); toast.success("Oferta creada exitosamente"); setIsCreateModalOpen(false); }, onError: (error) => { console.error('Error creating offer:', error); toast.error("Error al crear la oferta"); } }); // Update offer mutation const updateOfferMutation = useMutation({ mutationFn: ({ id, data }: { id: string; data: any }) => offersService.updateOffer(id, { title: data.title, description: data.description, credit_cost: data.credits, original_value: data.originalValue, duration_minutes: data.duration, membership_tier: data.membershipTier, status: data.status, available_times: data.availableSlots || [], max_guests: data.maxGuests || 1, special_requirements: data.specialRequirements, terms_and_conditions: data.termsAndConditions, cancellation_hours: data.bookingWindow ? data.bookingWindow * 24 : 24, }), onSuccess: () => { queryClient.invalidateQueries({ queryKey: ['venue-offers', venueId] }); queryClient.invalidateQueries({ queryKey: ['offer-stats', venueId] }); toast.success("Oferta actualizada exitosamente"); setIsEditModalOpen(false); setSelectedOffer(null); }, onError: (error) => { console.error('Error updating offer:', error); toast.error("Error al actualizar la oferta"); } }); // Delete offer mutation const deleteOfferMutation = useMutation({ mutationFn: (id: string) => offersService.deleteOffer(id), onSuccess: () => { queryClient.invalidateQueries({ queryKey: ['venue-offers', venueId] }); queryClient.invalidateQueries({ queryKey: ['offer-stats', venueId] }); toast.success("Oferta eliminada exitosamente"); }, onError: (error) => { console.error('Error deleting offer:', error); toast.error("Error al eliminar la oferta"); } }); const filteredOffers = offers.filter(offer => { const statusMatch = filterStatus === 'all' || offer.status === filterStatus; const tierMatch = filterTier === 'all' || offer.membership_tier === filterTier; return statusMatch && tierMatch; }); const getStatusBadge = (status: string) => { const statusConfig = { active: { label:"Activa", className:"bg-gray-100 text-gray-900", icon: CheckCircle }, paused: { label:"Pausada", className:"bg-gray-100 text-gray-900", icon: Pause }, inactive: { label:"Inactiva", className:"bg-gray-100 text-gray-800", icon: X }, draft: { label:"Borrador", className:"bg-gray-100 text-gray-900", icon: Edit } }; const config = statusConfig[status as keyof typeof statusConfig] || statusConfig.draft; const IconComponent = config.icon; return ( <Badge className={config.className}> <IconComponent className="w-3 h-3 mr-1"/> {config.label} </Badge> ); }; const getMembershipBadge = (tier: string) => { const tierConfig = { basic: { label:"Basic", className:"bg-gray-100 text-gray-800"}, premium: { label:"Premium", className:"bg-gray-100 text-gray-900"}, vip: { label:"VIP", className:"bg-gray-100 text-gray-900"} }; const config = tierConfig[tier as keyof typeof tierConfig] || tierConfig.basic; return <Badge className={config.className}>{config.label}</Badge>; }; const handleStatusToggle = async (offer: Offer) => { const newStatus = offer.status === 'active' ? 'paused' : 'active'; updateOfferMutation.mutate({ id: offer.id, data: { ...offer, status: newStatus, credits: offer.credit_cost, originalValue: offer.original_value, duration: offer.duration_minutes, membershipTier: offer.membership_tier, availableSlots: offer.available_times || [], maxGuests: offer.max_guests, specialRequirements: offer.special_requirements, termsAndConditions: offer.terms_and_conditions, bookingWindow: offer.cancellation_hours ? offer.cancellation_hours / 24 : 1 } }); }; const handleDuplicate = async (offer: Offer) => { const duplicatedOffer = { title: `${offer.title} (Copia)`, description: offer.description, credits: offer.credit_cost, originalValue: offer.original_value, duration: offer.duration_minutes, membershipTier: offer.membership_tier, status: 'draft', availableSlots: offer.available_times || [], maxGuests: offer.max_guests, specialRequirements: offer.special_requirements, termsAndConditions: offer.terms_and_conditions, bookingWindow: offer.cancellation_hours ? offer.cancellation_hours / 24 : 1 }; createOfferMutation.mutate(duplicatedOffer); }; // Add loading state if (isLoading) { return ( <div className="space-y-6"> <div className="flex items-center justify-center h-32"> <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-black"></div> <span className="ml-2 text-gray-600">Cargando ofertas...</span> </div> </div> ); } // Add error state if (error) { return ( <div className="space-y-6"> <div className="text-center py-8"> <AlertCircle className="w-16 h-16 text-gray-400 mx-auto mb-4"/> <h3 className="text-lg font-medium text-gray-900 mb-2">Error al cargar ofertas</h3> <p className="text-gray-600">Ha ocurrido un error al cargar las ofertas del venue.</p> </div> </div> ); } return ( <div className="space-y-6"> {/* Header */} <div className="flex items-center justify-between"> <div> <h2 className="text-2xl font-light text-black"> Gesti√≥n de <span className="font-semibold">Ofertas</span> </h2> <p className="text-gray-600"> Crea y gestiona las experiencias disponibles para miembros URContent </p> </div> <div className="flex items-center space-x-3"> <Button variant="outline"onClick={() => setViewMode(viewMode === 'grid' ? 'list' : 'grid')} className="rounded"> {viewMode === 'grid' ? <Eye className="w-4 h-4"/> : <BarChart3 className="w-4 h-4"/>} </Button> <Dialog open={isCreateModalOpen} onOpenChange={setIsCreateModalOpen}> <DialogTrigger asChild> <Button className="bg-black hover:bg-gray-800 text-white rounded px-6"> <Plus className="w-4 h-4 mr-2"/> Nueva Oferta </Button> </DialogTrigger> <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto"> <DialogHeader> <DialogTitle>Crear Nueva Oferta</DialogTitle> <DialogDescription> Crea una nueva experiencia para miembros URContent </DialogDescription> </DialogHeader> <OfferForm onSubmit={(data) => createOfferMutation.mutate(data)} onCancel={() => setIsCreateModalOpen(false)} isSubmitting={createOfferMutation.isPending} /> </DialogContent> </Dialog> </div> </div> {/* Filters */} <Card className="border border-gray-200 rounded"> <CardContent className="p-6"> <div className="flex items-center space-x-6"> <div className="flex items-center space-x-2"> <Label className="text-sm font-medium">Estado:</Label> <Select value={filterStatus} onValueChange={setFilterStatus}> <SelectTrigger className="w-32 rounded"> <SelectValue /> </SelectTrigger> <SelectContent> <SelectItem value="all">Todos</SelectItem> <SelectItem value="active">Activas</SelectItem> <SelectItem value="paused">Pausadas</SelectItem> <SelectItem value="inactive">Inactivas</SelectItem> <SelectItem value="draft">Borradores</SelectItem> </SelectContent> </Select> </div> <div className="flex items-center space-x-2"> <Label className="text-sm font-medium">Membres√≠a:</Label> <Select value={filterTier} onValueChange={setFilterTier}> <SelectTrigger className="w-32 rounded"> <SelectValue /> </SelectTrigger> <SelectContent> <SelectItem value="all">Todas</SelectItem> <SelectItem value="basic">Basic</SelectItem> <SelectItem value="premium">Premium</SelectItem> <SelectItem value="vip">VIP</SelectItem> </SelectContent> </Select> </div> <div className="flex-1"/> <div className="text-sm text-gray-600"> {filteredOffers.length} de {offers.length} ofertas </div> </div> </CardContent> </Card> {/* Offers Grid/List */} {viewMode === 'grid' ? ( <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"> {filteredOffers.map((offer) => ( <OfferCard key={offer.id} offer={offer} onEdit={(offer) => { setSelectedOffer(offer); setIsEditModalOpen(true); }} onDelete={(id) => deleteOfferMutation.mutate(id)} onDuplicate={handleDuplicate} onToggleStatus={handleStatusToggle} /> ))} </div> ) : ( <div className="space-y-4"> {filteredOffers.map((offer) => ( <OfferListItem key={offer.id} offer={offer} onEdit={(offer) => { setSelectedOffer(offer); setIsEditModalOpen(true); }} onDelete={(id) => deleteOfferMutation.mutate(id)} onDuplicate={handleDuplicate} onToggleStatus={handleStatusToggle} /> ))} </div> )} {/* Edit Modal */} <Dialog open={isEditModalOpen} onOpenChange={setIsEditModalOpen}> <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto"> <DialogHeader> <DialogTitle>Editar Oferta</DialogTitle> <DialogDescription> Modifica los detalles de tu experiencia </DialogDescription> </DialogHeader> {selectedOffer && ( <OfferForm initialData={{ title: selectedOffer.title, description: selectedOffer.description, credits: selectedOffer.credit_cost, originalValue: selectedOffer.original_value, duration: selectedOffer.duration_minutes, membershipTier: selectedOffer.membership_tier, status: selectedOffer.status, availableSlots: selectedOffer.available_times || [], maxGuests: selectedOffer.max_guests, specialRequirements: selectedOffer.special_requirements, termsAndConditions: selectedOffer.terms_and_conditions, bookingWindow: selectedOffer.cancellation_hours ? selectedOffer.cancellation_hours / 24 : 1, category: selectedOffer.category, location: selectedOffer.location, cancellationPolicy: selectedOffer.cancellation_policy }} onSubmit={(data) => updateOfferMutation.mutate({ id: selectedOffer.id, data })} onCancel={() => { setIsEditModalOpen(false); setSelectedOffer(null); }} isSubmitting={updateOfferMutation.isPending} /> )} </DialogContent> </Dialog> </div> );
}; // Offer Card Component
const OfferCard = ({ offer, onEdit, onDelete, onDuplicate, onToggleStatus }: { offer: Offer; onEdit: (offer: Offer) => void; onDelete: (id: string) => void; onDuplicate: (offer: Offer) => void; onToggleStatus: (offer: Offer) => void;
}) => { return ( <Card className="border border-gray-200 rounded hover:shadow-lg transition-shadow"> <CardContent className="p-6"> <div className="flex items-center justify-between mb-4"> <h3 className="font-semibold text-black truncate">{offer.title}</h3> <div className="flex items-center space-x-2"> {getStatusBadge(offer.status)} </div> </div> <p className="text-gray-600 text-sm mb-4 line-clamp-2"> {offer.description} </p> <div className="space-y-3 mb-4"> <div className="flex items-center justify-between text-sm"> <span className="text-gray-500">Cr√©ditos:</span> <Badge className="bg-black text-white">{offer.credit_cost}</Badge> </div> <div className="flex items-center justify-between text-sm"> <span className="text-gray-500">Valor original:</span> <span className="font-medium">${offer.original_value?.toLocaleString()}</span> </div> <div className="flex items-center justify-between text-sm"> <span className="text-gray-500">Duraci√≥n:</span> <span className="font-medium">{offer.duration_minutes}min</span> </div> <div className="flex items-center justify-between text-sm"> <span className="text-gray-500">Membres√≠a:</span> {getMembershipBadge(offer.membership_tier)} </div> <div className="flex items-center justify-between text-sm"> <span className="text-gray-500">Reservas:</span> <span className="font-medium text-gray-700">{offer.reservations?.length || 0}</span> </div> </div> <div className="grid grid-cols-2 gap-2"> <Button size="sm"variant="outline"onClick={() => onEdit(offer)} className="rounded"> <Edit className="w-4 h-4 mr-2"/> Editar </Button> <Button size="sm"variant="outline"onClick={() => onToggleStatus(offer)} className="rounded"> {offer.status === 'active' ? ( <Pause className="w-4 h-4 mr-2"/> ) : ( <Play className="w-4 h-4 mr-2"/> )} {offer.status === 'active' ? 'Pausar' : 'Activar'} </Button> <Button size="sm"variant="outline"onClick={() => onDuplicate(offer)} className="rounded"> <Copy className="w-4 h-4 mr-2"/> Duplicar </Button> <Button size="sm"variant="outline"onClick={() => onDelete(offer.id)} className="rounded text-gray-700 hover:text-gray-800"> <Trash2 className="w-4 h-4 mr-2"/> Eliminar </Button> </div> </CardContent> </Card> );
}; // Offer List Item Component
const OfferListItem = ({ offer, onEdit, onDelete, onDuplicate, onToggleStatus }: { offer: Offer; onEdit: (offer: Offer) => void; onDelete: (id: string) => void; onDuplicate: (offer: Offer) => void; onToggleStatus: (offer: Offer) => void;
}) => { return ( <Card className="border border-gray-200 rounded"> <CardContent className="p-6"> <div className="flex items-center justify-between"> <div className="flex-1"> <div className="flex items-center space-x-3 mb-2"> <h3 className="font-semibold text-black">{offer.title}</h3> {getStatusBadge(offer.status)} {getMembershipBadge(offer.membership_tier)} </div> <p className="text-gray-600 text-sm mb-3 line-clamp-1"> {offer.description} </p> <div className="flex items-center space-x-6 text-sm"> <div className="flex items-center space-x-1"> <CreditCard className="w-4 h-4 text-gray-400"/> <span>{offer.credit_cost} cr√©ditos</span> </div> <div className="flex items-center space-x-1"> <DollarSign className="w-4 h-4 text-gray-400"/> <span>${offer.original_value?.toLocaleString()}</span> </div> <div className="flex items-center space-x-1"> <Clock className="w-4 h-4 text-gray-400"/> <span>{offer.duration_minutes}min</span> </div> <div className="flex items-center space-x-1"> <TrendingUp className="w-4 h-4 text-gray-400"/> <span>{offer.reservations?.length || 0} reservas</span> </div> </div> </div> <div className="flex items-center space-x-2"> <Button size="sm"variant="outline"onClick={() => onEdit(offer)} className="rounded"> <Edit className="w-4 h-4"/> </Button> <Button size="sm"variant="outline"onClick={() => onToggleStatus(offer)} className="rounded"> {offer.status === 'active' ? <Pause className="w-4 h-4"/> : <Play className="w-4 h-4"/>} </Button> <Button size="sm"variant="outline"onClick={() => onDuplicate(offer)} className="rounded"> <Copy className="w-4 h-4"/> </Button> <Button size="sm"variant="outline"onClick={() => onDelete(offer.id)} className="rounded text-gray-700 hover:text-gray-800 border-gray-200"> <Trash2 className="w-4 h-4"/> </Button> </div> </div> </CardContent> </Card> );
}; // Offer Form Component
const OfferForm = ({ initialData, onSubmit, onCancel, isSubmitting = false
}: { initialData?: any; onSubmit: (data: any) => void; onCancel: () => void; isSubmitting?: boolean;
}) => { const [formData, setFormData] = useState({ title: initialData?.title ||"", description: initialData?.description ||"", credits: initialData?.credits || 1, originalValue: initialData?.originalValue || 0, duration: initialData?.duration || 60, membershipTier: initialData?.membershipTier ||"basic", status: initialData?.status ||"draft", availableSlots: initialData?.availableSlots || [], category: initialData?.category ||"", maxGuests: initialData?.maxGuests || 1, validUntil: initialData?.validUntil, termsAndConditions: initialData?.termsAndConditions ||"", specialRequirements: initialData?.specialRequirements ||"", location: initialData?.location ||"", bookingWindow: initialData?.bookingWindow || 7, cancellationPolicy: initialData?.cancellationPolicy ||"", tags: initialData?.tags || [] }); const [activeTab, setActiveTab] = useState("basic"); const timeSlots = ["09:00","09:30","10:00","10:30","11:00","11:30","12:00","12:30","13:00","13:30","14:00","14:30","15:00","15:30","16:00","16:30","17:00","17:30","18:00","18:30","19:00","19:30","20:00","20:30"]; const handleSubmit = () => { onSubmit(formData); }; const toggleTimeSlot = (slot: string) => { const currentSlots = formData.availableSlots || []; if (currentSlots.includes(slot)) { setFormData(prev => ({ ...prev, availableSlots: currentSlots.filter(s => s !== slot) })); } else { setFormData(prev => ({ ...prev, availableSlots: [...currentSlots, slot] })); } }; return ( <div className="space-y-6"> <Tabs value={activeTab} onValueChange={setActiveTab}> <TabsList className="grid w-full grid-cols-4 bg-gray-100 rounded p-1"> <TabsTrigger value="basic"className="rounded">B√°sico</TabsTrigger> <TabsTrigger value="pricing"className="rounded">Precio & Cr√©ditos</TabsTrigger> <TabsTrigger value="scheduling"className="rounded">Horarios</TabsTrigger> <TabsTrigger value="advanced"className="rounded">Avanzado</TabsTrigger> </TabsList> <TabsContent value="basic"className="space-y-4"> <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> <div> <Label htmlFor="title">T√≠tulo de la experiencia *</Label> <Input id="title"placeholder="Ej: Masaje Relajante Completo"value={formData.title} onChange={(e) => setFormData(prev => ({ ...prev, title: e.target.value }))} className="rounded"/> </div> <div> <Label htmlFor="category">Categor√≠a</Label> <Select value={formData.category} onValueChange={(value) => setFormData(prev => ({ ...prev, category: value }))} > <SelectTrigger className="rounded"> <SelectValue placeholder="Selecciona una categor√≠a"/> </SelectTrigger> <SelectContent> <SelectItem value="beauty">Beauty</SelectItem> <SelectItem value="wellness">Wellness</SelectItem> <SelectItem value="fitness">Fitness</SelectItem> <SelectItem value="restaurant">Restaurant</SelectItem> <SelectItem value="spa">Spa</SelectItem> <SelectItem value="salon">Salon</SelectItem> </SelectContent> </Select> </div> </div> <div> <Label htmlFor="description">Descripci√≥n *</Label> <Textarea id="description"placeholder="Describe la experiencia que ofreces..."value={formData.description} onChange={(e) => setFormData(prev => ({ ...prev, description: e.target.value }))} className="rounded"rows={4} /> </div> <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> <div> <Label htmlFor="location">Ubicaci√≥n espec√≠fica</Label> <Input id="location"placeholder="Ej: Sala Premium, Planta Baja"value={formData.location} onChange={(e) => setFormData(prev => ({ ...prev, location: e.target.value }))} className="rounded"/> </div> <div> <Label htmlFor="duration">Duraci√≥n (minutos) *</Label> <Input id="duration"type="number"min="15"max="480"step="15"value={formData.duration} onChange={(e) => setFormData(prev => ({ ...prev, duration: parseInt(e.target.value) || 60 }))} className="rounded"/> </div> </div> </TabsContent> <TabsContent value="pricing"className="space-y-4"> <div className="grid grid-cols-1 md:grid-cols-3 gap-4"> <div> <Label htmlFor="credits">Cr√©ditos requeridos *</Label> <Select value={formData.credits?.toString()} onValueChange={(value) => setFormData(prev => ({ ...prev, credits: parseInt(value) }))} > <SelectTrigger className="rounded"> <SelectValue /> </SelectTrigger> <SelectContent> {[1, 2, 3, 4, 5, 6, 7, 8, 9, 10].map(credit => ( <SelectItem key={credit} value={credit.toString()}> {credit} {credit === 1 ? 'cr√©dito' : 'cr√©ditos'} </SelectItem> ))} </SelectContent> </Select> </div> <div> <Label htmlFor="originalValue">Valor original ($) *</Label> <Input id="originalValue"type="number"min="0"step="100"placeholder="10000"value={formData.originalValue} onChange={(e) => setFormData(prev => ({ ...prev, originalValue: parseInt(e.target.value) || 0 }))} className="rounded"/> </div> <div> <Label htmlFor="membershipTier">Membres√≠a requerida *</Label> <Select value={formData.membershipTier} onValueChange={(value) => setFormData(prev => ({ ...prev, membershipTier: value as 'basic' | 'premium' | 'vip' }))} > <SelectTrigger className="rounded"> <SelectValue /> </SelectTrigger> <SelectContent> <SelectItem value="basic">Basic</SelectItem> <SelectItem value="premium">Premium</SelectItem> <SelectItem value="vip">VIP</SelectItem> </SelectContent> </Select> </div> </div> <div className="grid grid-cols-1 md:grid-cols-2 gap-4"> <div> <Label htmlFor="maxGuests">M√°ximo de invitados</Label> <Select value={formData.maxGuests?.toString()} onValueChange={(value) => setFormData(prev => ({ ...prev, maxGuests: parseInt(value) }))} > <SelectTrigger className="rounded"> <SelectValue /> </SelectTrigger> <SelectContent> {[1, 2, 3, 4, 5, 6, 8, 10].map(guests => ( <SelectItem key={guests} value={guests.toString()}> {guests} {guests === 1 ? 'persona' : 'personas'} </SelectItem> ))} </SelectContent> </Select> </div> <div> <Label htmlFor="bookingWindow">Reservar con (d√≠as de anticipaci√≥n)</Label> <Select value={formData.bookingWindow?.toString()} onValueChange={(value) => setFormData(prev => ({ ...prev, bookingWindow: parseInt(value) }))} > <SelectTrigger className="rounded"> <SelectValue /> </SelectTrigger> <SelectContent> <SelectItem value="1">1 d√≠a</SelectItem> <SelectItem value="3">3 d√≠as</SelectItem> <SelectItem value="7">1 semana</SelectItem> <SelectItem value="14">2 semanas</SelectItem> <SelectItem value="30">1 mes</SelectItem> </SelectContent> </Select> </div> </div> </TabsContent> <TabsContent value="scheduling"className="space-y-4"> <div> <Label>Horarios disponibles</Label> <p className="text-sm text-gray-600 mb-3"> Selecciona los horarios en los que est√° disponible esta experiencia </p> <div className="grid grid-cols-4 md:grid-cols-6 lg:grid-cols-8 gap-2"> {timeSlots.map((slot) => ( <Button key={slot} type="button"size="sm"variant={formData.availableSlots?.includes(slot) ?"default":"outline"} onClick={() => toggleTimeSlot(slot)} className="rounded"> {slot} </Button> ))} </div> </div> <div> <Label htmlFor="validUntil">V√°lida hasta (opcional)</Label> <Popover> <PopoverTrigger asChild> <Button variant="outline"className="w-full justify-start text-left font-normal rounded"> <CalendarIcon className="mr-2 h-4 w-4"/> {formData.validUntil ? format(formData.validUntil,"PPP", { locale: es }) :"Sin fecha l√≠mite"} </Button> </PopoverTrigger> <PopoverContent className="w-auto p-0"align="start"> <Calendar mode="single"selected={formData.validUntil} onSelect={(date) => setFormData(prev => ({ ...prev, validUntil: date }))} disabled={(date) => date < new Date()} locale={es} initialFocus /> </PopoverContent> </Popover> </div> </TabsContent> <TabsContent value="advanced"className="space-y-4"> <div> <Label htmlFor="specialRequirements">Requisitos especiales</Label> <Textarea id="specialRequirements"placeholder="Ej: Traer toalla propia, llegar 15 min antes, etc."value={formData.specialRequirements} onChange={(e) => setFormData(prev => ({ ...prev, specialRequirements: e.target.value }))} className="rounded"rows={3} /> </div> <div> <Label htmlFor="termsAndConditions">T√©rminos y condiciones</Label> <Textarea id="termsAndConditions"placeholder="T√©rminos espec√≠ficos para esta experiencia..."value={formData.termsAndConditions} onChange={(e) => setFormData(prev => ({ ...prev, termsAndConditions: e.target.value }))} className="rounded"rows={3} /> </div> <div> <Label htmlFor="cancellationPolicy">Pol√≠tica de cancelaci√≥n</Label> <Textarea id="cancellationPolicy"placeholder="Ej: Cancelaci√≥n gratuita hasta 4 horas antes"value={formData.cancellationPolicy} onChange={(e) => setFormData(prev => ({ ...prev, cancellationPolicy: e.target.value }))} className="rounded"rows={2} /> </div> <div> <Label htmlFor="status">Estado de la oferta</Label> <Select value={formData.status} onValueChange={(value) => setFormData(prev => ({ ...prev, status: value as 'active' | 'paused' | 'inactive' | 'draft' }))} > <SelectTrigger className="rounded"> <SelectValue /> </SelectTrigger> <SelectContent> <SelectItem value="draft">Borrador</SelectItem> <SelectItem value="active">Activa</SelectItem> <SelectItem value="paused">Pausada</SelectItem> <SelectItem value="inactive">Inactiva</SelectItem> </SelectContent> </Select> </div> </TabsContent> </Tabs> {/* Form Actions */} <div className="flex space-x-3 pt-6 border-t"> <Button variant="outline"onClick={onCancel} disabled={isSubmitting} className="flex-1 rounded"> Cancelar </Button> <Button onClick={handleSubmit} disabled={isSubmitting || !formData.title || !formData.description} className="flex-1 bg-black hover:bg-gray-800 text-white rounded"> {isSubmitting ? ( <> <Clock className="w-4 h-4 mr-2 animate-spin"/> Guardando... </> ) : ( <> <CheckCircle className="w-4 h-4 mr-2"/> {initialData ? 'Actualizar Oferta' : 'Crear Oferta'} </> )} </Button> </div> </div> );
}; export default OfferManager;