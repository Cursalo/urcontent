import React, { useState } from"react";
import { Badge } from"@/components/ui/badge";
import { Button } from"@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from"@/components/ui/card";
import { Eye, Heart, MessageCircle, Share2, TrendingUp, Play, Instagram, Youtube, ExternalLink, Upload, MoreVertical
} from"lucide-react";
import { MockPortfolioItem } from '@/data/mockUsers'; interface PortfolioShowcaseProps { portfolioItems: MockPortfolioItem[] | null | undefined; title?: string; description?: string; showAll?: boolean; maxItems?: number;
} export const PortfolioShowcase: React.FC<PortfolioShowcaseProps> = ({ portfolioItems: rawPortfolioItems, title ="Portfolio Showcase", description ="Your best recent work", showAll = false, maxItems = 6
}) => { const [selectedItem, setSelectedItem] = useState<MockPortfolioItem | null>(null); // Safely handle portfolio items with null/undefined checks const portfolioItems = React.useMemo(() => { if (!rawPortfolioItems) return []; if (!Array.isArray(rawPortfolioItems)) { console.warn('PortfolioShowcase: portfolioItems prop is not an array, received:', typeof rawPortfolioItems); return []; } return rawPortfolioItems.filter(item => item && typeof item === 'object'); }, [rawPortfolioItems]); const displayItems = showAll ? portfolioItems : portfolioItems.slice(0, maxItems); const getPlatformIcon = (platform: any) => { // Robust platform icon handling if (!platform) return <Eye className="w-4 h-4"/>; if (typeof platform !== 'string') { console.warn('getPlatformIcon: platform is not a string:', platform); return <Eye className="w-4 h-4"/>; } try { switch (platform.toLowerCase().trim()) { case 'instagram': return <Instagram className="w-4 h-4"/>; case 'youtube': return <Youtube className="w-4 h-4"/>; case 'tiktok': return <span className="text-sm font-bold">TT</span>; default: return <Eye className="w-4 h-4"/>; } } catch (error) { console.warn('getPlatformIcon: Error processing platform:', platform, error); return <Eye className="w-4 h-4"/>; } }; const getPlatformColor = (platform: any) => { // Safe platform color handling if (!platform) return 'bg-gray-500'; if (typeof platform !== 'string') { console.warn('getPlatformColor: platform is not a string:', platform); return 'bg-gray-500'; } try { switch (platform.toLowerCase().trim()) { case 'instagram': return 'bg-gray-900'; case 'youtube': return 'bg-gray-500'; case 'tiktok': return 'bg-black'; default: return 'bg-gray-500'; } } catch (error) { console.warn('getPlatformColor: Error processing platform:', platform, error); return 'bg-gray-500'; } }; const formatNumber = (num: any) => { // Safe number formatting with fallbacks try { const numValue = Number(num); if (isNaN(numValue)) { console.warn('formatNumber: Invalid number:', num); return '0'; } if (numValue >= 1000000) return `${(numValue / 1000000).toFixed(1)}M`; if (numValue >= 1000) return `${(numValue / 1000).toFixed(1)}K`; return numValue.toString(); } catch (error) { console.warn('formatNumber: Error formatting number:', num, error); return '0'; } }; const getEngagementColor = (rate: any) => { // Safe engagement color with fallbacks try { const numRate = Number(rate); if (isNaN(numRate)) { console.warn('getEngagementColor: Invalid rate:', rate); return 'text-gray-600'; } if (numRate >= 5) return 'text-gray-700'; if (numRate >= 3) return 'text-gray-700'; return 'text-gray-700'; } catch (error) { console.warn('getEngagementColor: Error processing rate:', rate, error); return 'text-gray-600'; } }; return ( <Card className="bg-white border border-gray-100 rounded hover:border-gray-200 transition-all duration-300"> <CardHeader className="pb-6"> <div className="flex items-center justify-between"> <div className="flex items-center space-x-3"> <div className="w-10 h-10 bg-gray-100 rounded flex items-center justify-center"> <Eye className="w-5 h-5 text-gray-700"/> </div> <div> <CardTitle className="text-xl font-medium text-black">{title}</CardTitle> <CardDescription className="text-gray-500 text-sm">{description}</CardDescription> </div> </div> <div className="flex items-center space-x-2"> <Button size="sm"variant="outline"className="border-gray-200 hover:bg-gray-50 rounded-full px-4 py-2"> <Upload className="w-4 h-4 mr-2"/> Add Content </Button> {!showAll && ( <Button size="sm"variant="outline"className="border-gray-200 hover:bg-gray-50 rounded-full px-4 py-2"> View All </Button> )} </div> </div> </CardHeader> <CardContent> {displayItems.length === 0 ? ( <div className="text-center py-12 text-gray-500"> <Eye className="w-12 h-12 mx-auto mb-4 opacity-30"/> <p className="text-lg font-medium mb-2">No portfolio items yet</p> <p className="text-sm mb-4">Upload your best content to showcase your work</p> <Button className="bg-black hover:bg-gray-800 text-white rounded-full px-6"> <Upload className="w-4 h-4 mr-2"/> Upload First Item </Button> </div> ) : ( <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6"> {displayItems.map((item, index) => { // Safe item data extraction with fallbacks const safeItem = { id: item?.id || `portfolio-${index}`, title: item?.title || 'Untitled Portfolio Item', description: item?.description || 'No description available', media_url: item?.media_url || null, media_type: item?.media_type || 'image', platform: item?.platform || 'unknown', is_featured: item?.is_featured || false, created_at: item?.created_at || new Date().toISOString(), engagement_stats: { likes: Number(item?.engagement_stats?.likes) || 0, comments: Number(item?.engagement_stats?.comments) || 0, engagement_rate: Number(item?.engagement_stats?.engagement_rate) || 0 }, tags: Array.isArray(item?.tags) ? item.tags.filter(tag => tag && typeof tag === 'string') : [], brand_mention: item?.brand_mention || null }; return ( <div key={safeItem.id} className="group relative bg-gray-50 rounded overflow-hidden hover:bg-gray-100 transition-all duration-300 cursor-pointer"onClick={() => setSelectedItem(item)} > {/* Media Container */} <div className="relative aspect-square bg-gray-900 overflow-hidden"> {safeItem.media_url ? ( <img src={safeItem.media_url} alt={safeItem.title} className="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"onError={(e) => { console.warn('Portfolio image failed to load:', safeItem.media_url); (e.target as HTMLImageElement).style.display = 'none'; }} /> ) : ( <div className="w-full h-full flex items-center justify-center"> <div className="text-center text-gray-500"> <Eye className="w-12 h-12 mx-auto mb-2 opacity-50"/> <p className="text-sm">Media Preview</p> </div> </div> )} {/* Media Type Indicator */} {safeItem.media_type === 'video' && ( <div className="absolute inset-0 flex items-center justify-center"> <div className="w-16 h-16 bg-black/60 rounded-full flex items-center justify-center backdrop-blur-sm"> <Play className="w-8 h-8 text-white ml-1"/> </div> </div> )} {/* Platform Badge */} <div className="absolute top-3 left-3"> <div className={`${getPlatformColor(safeItem.platform)} text-white px-2 py-1 rounded-full flex items-center space-x-1 text-xs font-medium`}> {getPlatformIcon(safeItem.platform)} <span className="capitalize">{safeItem.platform}</span> </div> </div> {/* Featured Badge */} {safeItem.is_featured && ( <div className="absolute top-3 right-3"> <Badge className="bg-gray-100 text-gray-900 border-gray-200"> ‚≠ê Featured </Badge> </div> )} {/* Hover Overlay */} <div className="absolute inset-0 bg-black/0 group-hover:bg-black/20 transition-all duration-300 flex items-center justify-center opacity-0 group-hover:opacity-100"> <Button size="sm"className="bg-white text-black hover:bg-gray-100 rounded-full px-4"> View Details </Button> </div> </div> {/* Content */} <div className="p-4"> <div className="flex items-start justify-between mb-3"> <div className="flex-1"> <h3 className="font-semibold text-black text-sm mb-1 line-clamp-1"> {safeItem.title} </h3> <p className="text-xs text-gray-600 line-clamp-2"> {safeItem.description} </p> </div> <Button size="sm"variant="ghost"className="p-1 h-auto"> <MoreVertical className="w-4 h-4"/> </Button> </div> {/* Engagement Stats */} <div className="grid grid-cols-3 gap-2 mb-3"> <div className="text-center"> <div className="flex items-center justify-center space-x-1 text-xs text-gray-600"> <Heart className="w-3 h-3"/> <span>{formatNumber(safeItem.engagement_stats.likes)}</span> </div> </div> <div className="text-center"> <div className="flex items-center justify-center space-x-1 text-xs text-gray-600"> <MessageCircle className="w-3 h-3"/> <span>{formatNumber(safeItem.engagement_stats.comments)}</span> </div> </div> <div className="text-center"> <div className="flex items-center justify-center space-x-1 text-xs text-gray-600"> <TrendingUp className="w-3 h-3"/> <span className={getEngagementColor(safeItem.engagement_stats.engagement_rate)}> {Number(safeItem.engagement_stats.engagement_rate).toFixed(1)}% </span> </div> </div> </div> {/* Tags */} {safeItem.tags && safeItem.tags.length > 0 && ( <div className="flex flex-wrap gap-1 mb-3"> {safeItem.tags.slice(0, 3).map((tag, tagIndex) => ( <Badge key={tagIndex} variant="outline"className="text-xs px-2 py-0.5 bg-gray-100 text-gray-600 border-gray-200"> #{tag} </Badge> ))} {safeItem.tags.length > 3 && ( <Badge variant="outline"className="text-xs px-2 py-0.5 bg-gray-100 text-gray-600 border-gray-200"> +{safeItem.tags.length - 3} </Badge> )} </div> )} {/* Brand Mention */} {safeItem.brand_mention && ( <div className="flex items-center space-x-2 text-xs text-gray-500"> <span>Brand:</span> <Badge variant="outline"className="text-xs bg-gray-50 text-gray-800 border-gray-200"> {safeItem.brand_mention} </Badge> </div> )} {/* Action Buttons */} <div className="flex items-center justify-between mt-3 pt-3 border-t border-gray-200"> <div className="flex items-center space-x-2"> <Button size="sm"variant="ghost"className="p-1 h-auto text-gray-500 hover:text-black"> <Eye className="w-4 h-4"/> </Button> <Button size="sm"variant="ghost"className="p-1 h-auto text-gray-500 hover:text-black"> <Share2 className="w-4 h-4"/> </Button> <Button size="sm"variant="ghost"className="p-1 h-auto text-gray-500 hover:text-black"> <ExternalLink className="w-4 h-4"/> </Button> </div> <div className="text-xs text-gray-500"> {new Date(safeItem.created_at).toLocaleDateString()} </div> </div> </div> </div> ); })} </div> )} {/* Portfolio Stats Summary */} {displayItems.length > 0 && ( <div className="mt-8 p-6 bg-gray-900 rounded"> <h4 className="font-semibold text-black mb-4">Portfolio Performance</h4> <div className="grid grid-cols-2 md:grid-cols-4 gap-4"> <div className="text-center"> <div className="text-2xl font-bold text-black"> {displayItems.length} </div> <div className="text-xs text-gray-500">Total Items</div> </div> <div className="text-center"> <div className="text-2xl font-bold text-black"> {formatNumber( displayItems.reduce((sum, item) => { const likes = Number(item?.engagement_stats?.likes) || 0; return sum + likes; }, 0) )} </div> <div className="text-xs text-gray-500">Total Likes</div> </div> <div className="text-center"> <div className="text-2xl font-bold text-black"> {displayItems.length > 0 ? ( displayItems.reduce((sum, item) => { const rate = Number(item?.engagement_stats?.engagement_rate) || 0; return sum + rate; }, 0) / displayItems.length ).toFixed(1) : '0.0'}% </div> <div className="text-xs text-gray-500">Avg Engagement</div> </div> <div className="text-center"> <div className="text-2xl font-bold text-black"> {displayItems.filter(item => item?.is_featured).length} </div> <div className="text-xs text-gray-500">Featured</div> </div> </div> </div> )} </CardContent> </Card> );
};