import { useState, useEffect } from"react";
import { Link } from"react-router-dom";
import { Button } from"@/components/ui/button";
import { Input } from"@/components/ui/input";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from"@/components/ui/card";
import { Badge } from"@/components/ui/badge";
import { Avatar, AvatarFallback, AvatarImage } from"@/components/ui/avatar";
import { Tabs, TabsContent, TabsList, TabsTrigger } from"@/components/ui/tabs";
import { Progress } from"@/components/ui/progress";
import { Search, Filter, Plus, Calendar, DollarSign, Users, TrendingUp, MessageCircle, Star, Eye, Clock, CheckCircle, XCircle, AlertCircle, MoreHorizontal, Edit, Trash2, ExternalLink, Loader2
} from"lucide-react";
import { Navbar } from"@/components/layout/Navbar";
import { Footer } from"@/components/layout/Footer";
import { useAuth } from"@/contexts/AuthContext";
import { collaborationService, businessService, messagingService, Collaboration } from"@/services";
import { useNavigate } from"react-router-dom"; const statusConfig = { proposed: { label:"Propuesta", color:"bg-gray-100 text-gray-900", icon: Clock }, accepted: { label:"Aceptada", color:"bg-gray-100 text-gray-900", icon: CheckCircle }, in_progress: { label:"En Progreso", color:"bg-gray-100 text-gray-900", icon: TrendingUp }, completed: { label:"Completada", color:"bg-gray-100 text-gray-900", icon: CheckCircle }, cancelled: { label:"Cancelada", color:"bg-gray-100 text-gray-900", icon: XCircle }
}; const CampaignManagement = () => { const { user, profile } = useAuth(); const [searchQuery, setSearchQuery] = useState(""); const [selectedStatus, setSelectedStatus] = useState("all"); const [campaigns, setCampaigns] = useState<Collaboration[]>([]); const [loading, setLoading] = useState(true); const [error, setError] = useState<string | null>(null); const [statsOverview, setStatsOverview] = useState({ totalCampaigns: 0, activeCampaigns: 0, completedCampaigns: 0, totalSpent: 0, avgRating: 0, totalReach: 0 }); // Fetch campaigns data useEffect(() => { const fetchCampaigns = async () => { if (!user || !profile || profile.role !== 'business') return; try { setLoading(true); setError(null); // Get business profile const businessProfile = await businessService.getBusinessByUserId(user.id); if (!businessProfile) { setError('Perfil de negocio no encontrado'); return; } // Get campaigns (collaborations) for this business const data = await collaborationService.getCollaborations({ business_id: businessProfile.id }); setCampaigns(data); // Get dashboard stats const stats = await businessService.getBusinessDashboardStats(businessProfile.id); setStatsOverview(stats); } catch (err) { console.error('Error fetching campaigns:', err); setError('Error al cargar las campañas'); } finally { setLoading(false); } }; fetchCampaigns(); }, [user, profile]); // Filter campaigns based on search and status const filteredCampaigns = campaigns.filter(campaign => { const matchesSearch = campaign.title?.toLowerCase().includes(searchQuery.toLowerCase()) || campaign.creator_profile?.user?.full_name?.toLowerCase().includes(searchQuery.toLowerCase()) || campaign.description?.toLowerCase().includes(searchQuery.toLowerCase()); const matchesStatus = selectedStatus ==="all"|| campaign.status === selectedStatus; return matchesSearch && matchesStatus; }); // Loading state if (loading) { return ( <div className="min-h-screen bg-white"> <Navbar /> <div className="pt-20 flex justify-center items-center min-h-[60vh]"> <div className="text-center"> <Loader2 className="w-8 h-8 animate-spin mx-auto mb-4 text-gray-400"/> <p className="text-gray-600">Cargando campañas...</p> </div> </div> <Footer /> </div> ); } // Error state if (error) { return ( <div className="min-h-screen bg-white"> <Navbar /> <div className="pt-20 flex justify-center items-center min-h-[60vh]"> <div className="text-center"> <p className="text-gray-700 mb-4">{error}</p> <Button onClick={() => window.location.reload()} variant="outline"className="rounded-full"> Reintentar </Button> </div> </div> <Footer /> </div> ); } return ( <div className="min-h-screen bg-white"> <Navbar /> <div className="pt-20"> <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-12"> {/* Header */} <div className="flex flex-col md:flex-row justify-between items-start md:items-center mb-12"> <div> <h1 className="text-4xl font-light text-black mb-4"> Gestión de <span className="font-semibold">Campañas</span> </h1> <p className="text-xl text-gray-600"> Administra y monitorea todas tus colaboraciones en un solo lugar </p> </div> <Link to="/marketplace"> <Button className="bg-black hover:bg-gray-800 text-white px-6 py-3 rounded-full font-medium mt-4 md:mt-0"> <Plus className="w-5 h-5 mr-2"/> Nueva Campaña </Button> </Link> </div> {/* Stats Overview */} <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-5 gap-6 mb-12"> <Card className="bg-white border border-gray-100 rounded p-6"> <div className="flex items-center space-x-4"> <div className="w-12 h-12 bg-gray-50 rounded flex items-center justify-center"> <Calendar className="w-6 h-6 text-gray-700"/> </div> <div> <div className="text-2xl font-light text-black">{statsOverview.totalCampaigns}</div> <div className="text-gray-500 text-sm">Campañas Totales</div> </div> </div> </Card> <Card className="bg-white border border-gray-100 rounded p-6"> <div className="flex items-center space-x-4"> <div className="w-12 h-12 bg-gray-50 rounded flex items-center justify-center"> <TrendingUp className="w-6 h-6 text-gray-700"/> </div> <div> <div className="text-2xl font-light text-black">{statsOverview.activeCampaigns}</div> <div className="text-gray-500 text-sm">Activas</div> </div> </div> </Card> <Card className="bg-white border border-gray-100 rounded p-6"> <div className="flex items-center space-x-4"> <div className="w-12 h-12 bg-gray-50 rounded flex items-center justify-center"> <DollarSign className="w-6 h-6 text-gray-700"/> </div> <div> <div className="text-2xl font-light text-black">${statsOverview.totalSpent.toLocaleString()}</div> <div className="text-gray-500 text-sm">Invertido</div> </div> </div> </Card> <Card className="bg-white border border-gray-100 rounded p-6"> <div className="flex items-center space-x-4"> <div className="w-12 h-12 bg-gray-50 rounded flex items-center justify-center"> <Eye className="w-6 h-6 text-gray-700"/> </div> <div> <div className="text-2xl font-light text-black">{(statsOverview.totalReach / 1000).toFixed(0)}K</div> <div className="text-gray-500 text-sm">Alcance Total</div> </div> </div> </Card> <Card className="bg-white border border-gray-100 rounded p-6"> <div className="flex items-center space-x-4"> <div className="w-12 h-12 bg-gray-50 rounded flex items-center justify-center"> <Star className="w-6 h-6 text-gray-700"/> </div> <div> <div className="text-2xl font-light text-black">{statsOverview.avgRating.toFixed(1)}</div> <div className="text-gray-500 text-sm">Rating Prom.</div> </div> </div> </Card> </div> {/* Filters and Search */} <div className="flex flex-col md:flex-row gap-4 mb-8"> <div className="flex-1"> <div className="relative"> <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400"/> <Input placeholder="Buscar campañas o creadores..."value={searchQuery} onChange={(e) => setSearchQuery(e.target.value)} className="pl-12 rounded-full border-gray-200"/> </div> </div> <Tabs value={selectedStatus} onValueChange={setSelectedStatus}> <TabsList className="bg-gray-100 rounded p-1"> <TabsTrigger value="all"className="rounded data-[state=active]:bg-black data-[state=active]:text-white"> Todas </TabsTrigger> <TabsTrigger value="proposed"className="rounded data-[state=active]:bg-black data-[state=active]:text-white"> Propuestas </TabsTrigger> <TabsTrigger value="accepted"className="rounded data-[state=active]:bg-black data-[state=active]:text-white"> Aceptadas </TabsTrigger> <TabsTrigger value="in_progress"className="rounded data-[state=active]:bg-black data-[state=active]:text-white"> En Progreso </TabsTrigger> <TabsTrigger value="completed"className="rounded data-[state=active]:bg-black data-[state=active]:text-white"> Completadas </TabsTrigger> </TabsList> </Tabs> </div> {/* Campaigns List */} <div className="space-y-6"> {filteredCampaigns.map((campaign) => ( <CampaignCard key={campaign.id} campaign={campaign} /> ))} </div> {filteredCampaigns.length === 0 && ( <div className="text-center py-12"> <div className="w-20 h-20 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-6"> <Calendar className="w-10 h-10 text-gray-400"/> </div> <h3 className="text-xl font-semibold text-black mb-2">No se encontraron campañas</h3> <p className="text-gray-600 mb-6">Ajusta los filtros o crea tu primera campaña</p> <Link to="/marketplace"> <Button className="bg-black hover:bg-gray-800 text-white px-6 py-3 rounded-full"> <Plus className="w-5 h-5 mr-2"/> Crear Primera Campaña </Button> </Link> </div> )} </div> </div> <Footer /> </div> );
}; const CampaignCard = ({ campaign }: { campaign: Collaboration }) => { const statusInfo = statusConfig[campaign.status as keyof typeof statusConfig]; const deliverables = campaign.deliverables ? JSON.parse(campaign.deliverables) : []; const completedDeliverables = deliverables.filter((d: any) => d.status === 'completed').length; const progressPercentage = deliverables.length > 0 ? (completedDeliverables / deliverables.length) * 100 : 0; return ( <Card className="bg-white border border-gray-100 rounded p-8 hover:border-gray-200 hover:shadow-xl hover:shadow-black/5 transition-all duration-300"> <div className="flex flex-col lg:flex-row gap-8"> {/* Left Column - Campaign Info */} <div className="flex-1"> <div className="flex items-start justify-between mb-6"> <div className="flex-1"> <div className="flex items-center space-x-3 mb-2"> <h3 className="text-xl font-semibold text-black">{campaign.title || 'Sin título'}</h3> <Badge className={`${statusInfo.color} text-xs px-2 py-1 rounded-full`}> {statusInfo.label} </Badge> </div> <div className="flex items-center space-x-4 text-sm text-gray-600 mb-4"> <div className="flex items-center space-x-1"> <Calendar className="w-4 h-4"/> <span>{campaign.start_date ? new Date(campaign.start_date).toLocaleDateString() : 'Sin fecha'} - {campaign.end_date ? new Date(campaign.end_date).toLocaleDateString() : 'Sin fecha'}</span> </div> <div className="flex items-center space-x-1"> <DollarSign className="w-4 h-4"/> <span>${campaign.compensation_amount || 0}</span> </div> </div> {/* Creator Info */} <div className="flex items-center space-x-3 mb-6"> <Avatar className="w-10 h-10"> <AvatarImage src={campaign.creator_profile?.user?.avatar_url || undefined} alt={campaign.creator_profile?.user?.full_name} /> <AvatarFallback>{campaign.creator_profile?.user?.full_name?.split(' ').map((n: string) => n[0]).join('') || 'UN'}</AvatarFallback> </Avatar> <div> <div className="font-medium text-black">{campaign.creator_profile?.user?.full_name || 'Creador no asignado'}</div> <div className="text-sm text-gray-500">@{campaign.creator_profile?.username || 'username'}</div> </div> </div> {/* Deliverables Progress */} {deliverables.length > 0 && ( <div className="mb-6"> <div className="flex items-center justify-between mb-3"> <span className="text-sm font-medium text-gray-700">Progreso de Entregables</span> <span className="text-sm text-gray-600">{completedDeliverables}/{deliverables.length}</span> </div> <Progress value={progressPercentage} className="h-2 rounded-full mb-3"/> <div className="flex flex-wrap gap-2"> {deliverables.map((deliverable: any, idx: number) => ( <Badge key={idx} variant={deliverable.status === 'completed' ? 'default' : 'secondary'} className={`text-xs px-2 py-1 rounded-full ${ deliverable.status === 'completed' ? 'bg-gray-100 text-gray-900' : deliverable.status === 'in_progress' ? 'bg-gray-100 text-gray-900' : 'bg-gray-100 text-gray-600' }`} > {deliverable.type} </Badge> ))} </div> </div> )} </div> <Button variant="ghost"size="sm"className="rounded-full p-2"> <MoreHorizontal className="w-4 h-4"/> </Button> </div> </div> {/* Right Column - Performance & Actions */} <div className="lg:w-80"> {/* Performance Stats */} {campaign.status === 'completed' && (campaign.reach || campaign.clicks) && ( <Card className="bg-gray-50 border-0 rounded p-6 mb-6"> <h4 className="font-medium text-black mb-4">Performance</h4> <div className="grid grid-cols-2 gap-4 text-center"> <div> <div className="text-lg font-semibold text-black">{((campaign.reach || 0) / 1000).toFixed(0)}K</div> <div className="text-xs text-gray-600">Alcance</div> </div> <div> <div className="text-lg font-semibold text-black">{(campaign.engagement_rate || 0)}%</div> <div className="text-xs text-gray-600">Engagement</div> </div> <div> <div className="text-lg font-semibold text-black">{campaign.clicks || 0}</div> <div className="text-xs text-gray-600">Clicks</div> </div> <div> <div className="text-lg font-semibold text-black">{campaign.conversions || 0}</div> <div className="text-xs text-gray-600">Conversiones</div> </div> </div> </Card> )} {/* Actions */} <div className="space-y-3"> <ChatButton campaign={campaign} /> <div className="grid grid-cols-2 gap-3"> <Button variant="outline"className="rounded-full text-sm"> <Edit className="w-4 h-4 mr-2"/> Editar </Button> <Button variant="outline"className="rounded-full text-sm"> <ExternalLink className="w-4 h-4 mr-2"/> Ver Detalles </Button> </div> </div> </div> </div> </Card> );
}; const ChatButton = ({ campaign }: { campaign: Collaboration }) => { const { user, profile } = useAuth(); const navigate = useNavigate(); const [loading, setLoading] = useState(false); const handleStartChat = async () => { if (!user || !profile || profile.role !== 'business' || !campaign.creator_profile) return; try { setLoading(true); // Get business profile const businessProfile = await businessService.getBusinessByUserId(user.id); if (!businessProfile) { console.error('Business profile not found'); return; } // Get or create conversation const conversation = await messagingService.getOrCreateConversation( campaign.creator_profile.id, businessProfile.id, campaign.id ); // Navigate to messages page with conversation ID navigate(`/messages/${conversation.id}`); } catch (err) { console.error('Error starting chat:', err); } finally { setLoading(false); } }; return ( <Button onClick={handleStartChat} disabled={loading || !campaign.creator_profile} className="w-full bg-black hover:bg-gray-800 text-white rounded-full"> {loading ? ( <Loader2 className="w-4 h-4 mr-2 animate-spin"/> ) : ( <MessageCircle className="w-4 h-4 mr-2"/> )} Chat con Creador </Button> );
}; export default CampaignManagement;