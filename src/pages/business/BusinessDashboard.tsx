import React, { useState, useEffect } from"react";
import { DashboardLoadingSkeleton } from"@/components/dashboard/LoadingSkeleton";
import BusinessDashboardNav from"@/components/business/BusinessDashboardNav";
import PanelPrincipalBusiness from"@/components/business/PanelPrincipalBusiness";
import GestionCampanas from"@/components/business/GestionCampanas";
import BusquedaCreators from"@/components/business/BusquedaCreators";
import AnalyticsNegocio from"@/components/business/AnalyticsNegocio";
import CentroMensajes from"@/components/business/CentroMensajes";
import ConfiguracionNegocio from"@/components/business/ConfiguracionNegocio";
import { businessMockData } from"@/data/businessMockData";
import { useAuth } from"@/contexts/AuthContext";
import { useHybridDashboard } from"@/hooks/useHybridDashboard";
import { toast } from"sonner";
import { DashboardErrorBoundary } from"@/components/dashboard/DashboardErrorBoundary";
import { AnonymousAccessBanner } from"@/components/auth/AnonymousAccessBanner";
import { GuestModeInfo, businessFeatures } from"@/components/auth/GuestModeInfo";
import { Button } from"@/components/ui/button";
import { Lock } from"lucide-react";
import { GuestModeBanner } from"@/components/auth/GuestModeBanner";
import { MobileNav } from"@/components/navigation/MobileNav";
import { DashboardNav } from"@/components/dashboard/DashboardNav"; const BusinessDashboard = () => { const { user, profile } = useAuth(); const [tabActiva, setTabActiva] = useState("panel-principal"); const [showGuestInfo, setShowGuestInfo] = useState(false); const [showGuestBanner, setShowGuestBanner] = useState(true); const { loading, error, dashboardData, authType, userProfile: businessProfile, collaborations, portfolio, metrics, analytics, refresh } = useHybridDashboard('business'); // Mensajes nuevos mock const mensajesNuevos = businessMockData.metricas.mensajesNuevos; // Mostrar notificación de bienvenida useEffect(() => { if (!loading && dashboardData) { toast.success('¡Panel de Negocio cargado exitosamente!', { description: `Bienvenido de vuelta. Tienes ${metrics?.activeCampaigns || 0} campañas activas.`, duration: 4000, }); } }, [loading, dashboardData, metrics]); // Manejar errores useEffect(() => { if (error) { toast.error(error); } }, [error]); // Estado de carga if (loading) { return ( <div className="flex h-screen bg-gray-50"> <div className="w-64 bg-white border-r border-gray-100"> <DashboardLoadingSkeleton /> </div> <div className="flex-1 p-8"> <DashboardLoadingSkeleton /> </div> </div> ); } // Estado de error if (error) { return ( <div className="min-h-screen bg-gray-50 flex items-center justify-center"> <div className="text-center"> <p className="text-gray-700 mb-4">{error}</p> <button onClick={() => window.location.reload()} className="px-4 py-2 bg-black text-white rounded-full hover:bg-gray-800"> Reintentar </button> </div> </div> ); } // Check if user is not authenticated - show anonymous access banner if (!user) { return ( <div className="min-h-screen bg-gray-50"> {/* Anonymous Access Banner */} <AnonymousAccessBanner userType="business"showFeatures={!showGuestInfo} /> {/* Toggle Guest Info Button */} <div className="text-center mb-8"> <Button variant="outline"onClick={() => setShowGuestInfo(!showGuestInfo)} className="rounded-full"> {showGuestInfo ? 'Ver Beneficios' : 'Ver Comparación de Funciones'} </Button> </div> {/* Guest Mode Feature Comparison */} {showGuestInfo && ( <div className="max-w-4xl mx-auto px-4 mb-8"> <GuestModeInfo features={businessFeatures} /> </div> )} {/* Limited Dashboard Preview */} <div className="max-w-7xl mx-auto px-4 pb-8"> <div className="bg-white rounded shadow-sm p-8"> <h3 className="text-xl font-semibold mb-4">Vista Previa del Dashboard de Negocio</h3> <p className="text-gray-600 mb-6"> Explora cómo se ve el panel de control para negocios. Regístrate para empezar a colaborar con creadores. </p> {/* Mock Stats */} <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-8"> <div className="bg-gray-50 rounded p-4 opacity-75"> <p className="text-sm text-gray-600">Campañas Activas</p> <p className="text-2xl font-bold text-gray-900">12</p> <p className="text-xs text-gray-500 mt-1">Datos de ejemplo</p> </div> <div className="bg-gray-50 rounded p-4 opacity-75"> <p className="text-sm text-gray-600">Creadores Colaborando</p> <p className="text-2xl font-bold text-gray-900">45</p> <p className="text-xs text-gray-500 mt-1">Datos de ejemplo</p> </div> <div className="bg-gray-50 rounded p-4 opacity-75"> <p className="text-sm text-gray-600">Alcance Total</p> <p className="text-2xl font-bold text-gray-900">2.5M</p> <p className="text-xs text-gray-500 mt-1">Datos de ejemplo</p> </div> <div className="bg-gray-50 rounded p-4 opacity-75"> <p className="text-sm text-gray-600">ROI Promedio</p> <p className="text-2xl font-bold text-gray-900">285%</p> <p className="text-xs text-gray-500 mt-1">Datos de ejemplo</p> </div> </div> {/* Sample Content */} <div className="text-center py-8 bg-gray-50 rounded"> <Lock className="h-12 w-12 text-gray-400 mx-auto mb-4"/> <p className="text-gray-600"> Crea una cuenta de negocio para empezar a colaborar con creadores de contenido </p> </div> </div> </div> </div> ); } // Renderizar contenido según la tab activa const renderContenido = () => { switch (tabActiva) { case 'panel-principal': return <PanelPrincipalBusiness />; case 'campanas': return <GestionCampanas />; case 'buscar-creators': return <BusquedaCreators />; case 'analytics': return <AnalyticsNegocio />; case 'mensajes': return <CentroMensajes />; case 'calendario': return ( <div className="flex items-center justify-center h-[60vh]"> <div className="text-center"> <p className="text-gray-500 mb-4">Calendario en desarrollo</p> <p className="text-sm text-gray-400">Próximamente podrás gestionar todas tus fechas importantes aquí</p> </div> </div> ); case 'configuracion': return <ConfiguracionNegocio />; case 'ayuda': return ( <div className="flex items-center justify-center h-[60vh]"> <div className="text-center"> <p className="text-gray-500 mb-4">Centro de Ayuda</p> <p className="text-sm text-gray-400">¿Necesitas asistencia? Contáctanos en soporte@urcontent.com</p> </div> </div> ); default: return <PanelPrincipalBusiness />; } }; return ( <div className="min-h-screen bg-gray-50"> <DashboardNav /> <div className="flex relative"> {/* Navegación lateral - Hidden on mobile */} <div className="hidden lg:block"> <BusinessDashboardNav activeTab={tabActiva} onTabChange={setTabActiva} mensajesNuevos={mensajesNuevos} /> </div> {/* Contenido principal */} <div className="flex-1 overflow-y-auto lg:ml-64"> {/* Guest Mode Banner for anonymous users */} {!user && showGuestBanner && ( <GuestModeBanner compact={true} onDismiss={() => setShowGuestBanner(false)} /> )} <div className="p-4 sm:p-6 lg:p-8"> {/* Mobile Navigation Header */} <div className="flex items-center gap-3 mb-6 lg:hidden"> <MobileNav userRole="business"activeTab={tabActiva} onTabChange={setTabActiva} /> <h1 className="text-xl sm:text-2xl font-bold text-gray-900"> {tabActiva === 'panel-principal' && 'Panel Principal'} {tabActiva === 'campanas' && 'Campañas'} {tabActiva === 'buscar-creators' && 'Buscar Creators'} {tabActiva === 'analytics' && 'Analytics'} {tabActiva === 'mensajes' && 'Mensajes'} {tabActiva === 'calendario' && 'Calendario'} {tabActiva === 'configuracion' && 'Configuración'} {tabActiva === 'ayuda' && 'Ayuda'} </h1> </div> <DashboardErrorBoundary componentName={`BusinessDashboard-${tabActiva}`}> {user || dashboardData ? renderContenido() : ( <div className="flex items-center justify-center h-[60vh]"> <div className="text-center"> <p className="text-lg text-gray-600 mb-4">Cargando dashboard...</p> <p className="text-sm text-gray-500">Por favor espera mientras cargamos tu información</p> </div> </div> )} </DashboardErrorBoundary> </div> </div> </div> );
}; export default BusinessDashboard;