import { useState } from 'react';
import { useQuery, useMutation, useQueryClient } from '@tanstack/react-query';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Textarea } from '@/components/ui/textarea';
import { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle,
} from '@/components/ui/dialog';
import { ExternalLink, CheckCircle, XCircle, Clock, User, Calendar } from 'lucide-react';
import { toast } from 'sonner';
import { useAuth } from '@/contexts/AuthContext';
import { getSubmissionsForBusiness, reviewSubmission } from '@/services/submissions'; export default function ContentReview() { const { user } = useAuth(); const queryClient = useQueryClient(); const [selectedSubmission, setSelectedSubmission] = useState<any>(null); const [rejectionReason, setRejectionReason] = useState(''); const [isRejectDialogOpen, setIsRejectDialogOpen] = useState(false); const { data: submissions = [], isLoading } = useQuery({ queryKey: ['submissions', 'business', user?.id], queryFn: () => getSubmissionsForBusiness(user!.id), enabled: !!user?.id, }); const reviewMutation = useMutation({ mutationFn: ({ submissionId, status, rejectionReason, }: { submissionId: string; status: 'approved' | 'rejected'; rejectionReason?: string; }) => reviewSubmission(submissionId, { status, rejection_reason: rejectionReason }), onSuccess: (_, { status }) => { toast.success(`Content ${status} successfully!`); setIsRejectDialogOpen(false); setRejectionReason(''); setSelectedSubmission(null); queryClient.invalidateQueries({ queryKey: ['submissions', 'business', user?.id] }); }, onError: () => { toast.error('Failed to review content. Please try again.'); }, }); const handleApprove = (submissionId: string) => { reviewMutation.mutate({ submissionId, status: 'approved', }); }; const handleReject = (submission: any) => { setSelectedSubmission(submission); setIsRejectDialogOpen(true); }; const confirmReject = () => { if (!selectedSubmission || !rejectionReason.trim()) return; reviewMutation.mutate({ submissionId: selectedSubmission.id, status: 'rejected', rejectionReason: rejectionReason.trim(), }); }; const getSubmissionType = (submission: any) => { if (submission.collaboration) { return { type: 'Collaboration', title: submission.collaboration.campaign_title || submission.collaboration.title, date: null, }; } if (submission.reservation) { return { type: 'Experience', title: submission.reservation.offer?.title || 'Experience', date: submission.reservation.scheduled_date, }; } return { type: 'Unknown', title: 'Unknown', date: null }; }; const pendingSubmissions = submissions.filter((s) => s.status === 'pending_review'); const reviewedSubmissions = submissions.filter((s) => s.status !== 'pending_review'); if (isLoading) { return ( <div className="container mx-auto px-4 py-8"> <div className="animate-pulse space-y-6"> <div className="h-8 bg-gray-200 rounded w-1/3"></div> <div className="grid gap-4"> {[1, 2, 3].map((i) => ( <div key={i} className="h-32 bg-gray-200 rounded"></div> ))} </div> </div> </div> ); } return ( <div className="container mx-auto px-4 py-8"> <div className="mb-8"> <h1 className="text-3xl font-bold mb-2">Content Review</h1> <p className="text-gray-600"> Review content submissions from creators for your collaborations and experiences. </p> </div> {/* Pending Reviews */} <div className="mb-8"> <h2 className="text-xl font-semibold mb-4 flex items-center gap-2"> <Clock className="h-5 w-5 text-gray-500"/> Pending Reviews ({pendingSubmissions.length}) </h2> {pendingSubmissions.length === 0 ? ( <Card> <CardContent className="py-8 text-center"> <Clock className="h-12 w-12 text-gray-400 mx-auto mb-4"/> <p className="text-gray-600">No pending content submissions to review.</p> </CardContent> </Card> ) : ( <div className="grid gap-4"> {pendingSubmissions.map((submission) => { const submissionInfo = getSubmissionType(submission); return ( <Card key={submission.id}> <CardContent className="p-6"> <div className="flex items-start justify-between gap-4"> <div className="flex-1 min-w-0"> <div className="flex items-center gap-2 mb-2"> <Badge variant="outline">{submissionInfo.type}</Badge> <Badge className="bg-gray-100 text-gray-900">PENDING REVIEW</Badge> </div> <h3 className="font-semibold text-lg mb-1">{submissionInfo.title}</h3> <div className="flex items-center gap-4 text-sm text-gray-600 mb-3"> <div className="flex items-center gap-1"> <User className="h-4 w-4"/> {submission.creator?.creator_profiles?.username || submission.creator?.email} </div> {submissionInfo.date && ( <div className="flex items-center gap-1"> <Calendar className="h-4 w-4"/> {new Date(submissionInfo.date).toLocaleDateString()} </div> )} </div> <div className="mb-4"> <p className="text-sm text-gray-600 mb-1">Submitted Content:</p> <a href={submission.submission_url} target="_blank"rel="noopener noreferrer"className="text-gray-700 hover:text-gray-900 underline text-sm break-all"> {submission.submission_url} </a> </div> <p className="text-xs text-gray-500"> Submitted {new Date(submission.submitted_at).toLocaleDateString()} </p> </div> <div className="flex flex-col gap-2"> <Button size="sm"variant="outline"onClick={() => window.open(submission.submission_url, '_blank')} > <ExternalLink className="h-4 w-4 mr-1"/> View </Button> <Button size="sm"onClick={() => handleApprove(submission.id)} disabled={reviewMutation.isPending} className="bg-gray-700 hover:bg-gray-800"> <CheckCircle className="h-4 w-4 mr-1"/> Approve </Button> <Button size="sm"variant="destructive"onClick={() => handleReject(submission)} disabled={reviewMutation.isPending} > <XCircle className="h-4 w-4 mr-1"/> Reject </Button> </div> </div> </CardContent> </Card> ); })} </div> )} </div> {/* Review History */} {reviewedSubmissions.length > 0 && ( <div> <h2 className="text-xl font-semibold mb-4">Review History</h2> <div className="grid gap-4"> {reviewedSubmissions.map((submission) => { const submissionInfo = getSubmissionType(submission); return ( <Card key={submission.id}> <CardContent className="p-6"> <div className="flex items-start justify-between gap-4"> <div className="flex-1 min-w-0"> <div className="flex items-center gap-2 mb-2"> <Badge variant="outline">{submissionInfo.type}</Badge> <Badge className={ submission.status === 'approved' ? 'bg-gray-100 text-gray-900' : 'bg-gray-100 text-gray-900' } > {submission.status.toUpperCase()} </Badge> </div> <h3 className="font-semibold mb-1">{submissionInfo.title}</h3> <div className="flex items-center gap-4 text-sm text-gray-600 mb-2"> <div className="flex items-center gap-1"> <User className="h-4 w-4"/> {submission.creator?.creator_profiles?.username || submission.creator?.email} </div> </div> <a href={submission.submission_url} target="_blank"rel="noopener noreferrer"className="text-gray-700 hover:text-gray-900 underline text-sm break-all"> {submission.submission_url} </a> {submission.status === 'rejected' && submission.rejection_reason && ( <p className="text-sm text-gray-700 mt-2"> Rejection reason: {submission.rejection_reason} </p> )} <p className="text-xs text-gray-500 mt-2"> Reviewed {new Date(submission.reviewed_at).toLocaleDateString()} </p> </div> <Button size="sm"variant="outline"onClick={() => window.open(submission.submission_url, '_blank')} > <ExternalLink className="h-4 w-4"/> </Button> </div> </CardContent> </Card> ); })} </div> </div> )} {/* Reject Dialog */} <Dialog open={isRejectDialogOpen} onOpenChange={setIsRejectDialogOpen}> <DialogContent> <DialogHeader> <DialogTitle>Reject Content Submission</DialogTitle> <DialogDescription> Please provide a reason for rejecting this content submission. This will help the creator understand what needs to be improved. </DialogDescription> </DialogHeader> <div className="py-4"> <Textarea placeholder="Please explain why this content doesn't meet the requirements..."value={rejectionReason} onChange={(e) => setRejectionReason(e.target.value)} rows={4} /> </div> <DialogFooter> <Button variant="outline"onClick={() => setIsRejectDialogOpen(false)}> Cancel </Button> <Button variant="destructive"onClick={confirmReject} disabled={!rejectionReason.trim() || reviewMutation.isPending} > {reviewMutation.isPending ? 'Rejecting...' : 'Reject Content'} </Button> </DialogFooter> </DialogContent> </Dialog> </div> );
}