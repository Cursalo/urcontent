import React, { useEffect, useState } from 'react';
import { useSearchParams, Link } from 'react-router-dom';
import { Card } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Clock, RefreshCw, MessageCircle, Home, CheckCircle2, AlertCircle } from 'lucide-react';
import { Navbar } from '@/components/layout/Navbar';
import { Footer } from '@/components/layout/Footer';
import { getPaymentStatus } from '@/lib/mercadopago'; const PaymentPending: React.FC = () => { const [searchParams] = useSearchParams(); const [paymentDetails, setPaymentDetails] = useState<any>(null); const [loading, setLoading] = useState(true); const [checking, setChecking] = useState(false); const paymentId = searchParams.get('payment_id'); const externalReference = searchParams.get('external_reference'); const paymentType = externalReference?.split('_')[0] || 'unknown'; useEffect(() => { const fetchPaymentDetails = async () => { if (paymentId) { try { const result = await getPaymentStatus(paymentId); if (result.success) { setPaymentDetails(result); // If payment is approved, redirect to success page if (result.status === 'approved') { window.location.href = `/payment/success?payment_id=${paymentId}&external_reference=${externalReference}`; } } } catch (error) { console.error('Error fetching payment details:', error); } } setLoading(false); }; fetchPaymentDetails(); // Check payment status every 30 seconds const interval = setInterval(fetchPaymentDetails, 30000); return () => clearInterval(interval); }, [paymentId, externalReference]); const checkPaymentStatus = async () => { setChecking(true); try { if (paymentId) { const result = await getPaymentStatus(paymentId); if (result.success) { setPaymentDetails(result); if (result.status === 'approved') { window.location.href = `/payment/success?payment_id=${paymentId}&external_reference=${externalReference}`; } else if (result.status === 'rejected') { window.location.href = `/payment/failure?payment_id=${paymentId}&external_reference=${externalReference}`; } } } } catch (error) { console.error('Error checking payment status:', error); } finally { setChecking(false); } }; const getPaymentTypeInfo = (type: string) => { switch (type) { case 'membership': return { title: 'Procesando Membres√≠a', description: 'Estamos procesando tu pago de membres√≠a URContent', icon: '‚è≥' }; case 'collaboration': return { title: 'Procesando Pago de Colaboraci√≥n', description: 'El pago de la colaboraci√≥n est√° siendo procesado', icon: 'ü§ù' }; case 'experience': return { title: 'Procesando Reserva', description: 'Tu reserva de experiencia est√° siendo procesada', icon: '‚ú®' }; default: return { title: 'Procesando Pago', description: 'Tu pago est√° siendo procesado', icon: 'üí≥' }; } }; const paymentInfo = getPaymentTypeInfo(paymentType); const getPendingReasons = () => [ { title: 'Verificaci√≥n Bancaria', description: 'El banco est√° verificando la transacci√≥n', timeframe: '5-10 minutos' }, { title: 'Pago en Efectivo', description: 'Pago pendiente en punto de pago f√≠sico', timeframe: 'Hasta 3 d√≠as h√°biles' }, { title: 'Transferencia Bancaria', description: 'Transferencia en proceso de acreditaci√≥n', timeframe: '1-2 d√≠as h√°biles' }, { title: 'Revisi√≥n de Seguridad', description: 'Verificaci√≥n adicional por seguridad', timeframe: '10-30 minutos' } ]; return ( <div className="min-h-screen bg-white"> <Navbar /> <div className="pt-20 pb-16"> <div className="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8"> {/* Pending Header */} <div className="text-center mb-12"> <div className="w-24 h-24 bg-gray-900 rounded-full mx-auto mb-6 flex items-center justify-center"> <Clock className="w-12 h-12 text-white animate-pulse"/> </div> <h1 className="text-4xl font-bold text-gray-900 mb-4"> {paymentInfo.title} {paymentInfo.icon} </h1> <p className="text-xl text-gray-600"> {paymentInfo.description} </p> </div> {/* Status Check Button */} <div className="text-center mb-8"> <Button onClick={checkPaymentStatus} disabled={checking} className="bg-gray-700 hover:bg-gray-800 text-white"> {checking ? ( <> <RefreshCw className="w-4 h-4 mr-2 animate-spin"/> Verificando... </> ) : ( <> <RefreshCw className="w-4 h-4 mr-2"/> Verificar Estado del Pago </> )} </Button> </div> {/* Payment Details */} {!loading && paymentDetails && ( <Card className="p-8 mb-8 bg-gray-900 border-gray-200"> <div className="text-center"> <h2 className="text-2xl font-semibold text-gray-900 mb-6"> Estado del Pago </h2> <div className="space-y-4"> <div> <p className="text-sm font-medium text-gray-700">Estado Actual</p> <Badge className="bg-gray-100 text-gray-900"> En Proceso </Badge> </div> <div> <p className="text-sm font-medium text-gray-700">ID de Transacci√≥n</p> <p className="text-sm font-mono text-gray-600">{paymentId}</p> </div> <div> <p className="text-sm font-medium text-gray-700">Fecha de Solicitud</p> <p className="text-sm text-gray-600"> {new Date().toLocaleDateString('es-AR', { year: 'numeric', month: 'long', day: 'numeric', hour: '2-digit', minute: '2-digit' })} </p> </div> </div> </div> </Card> )} {/* Auto-refresh Notice */} <Card className="p-6 mb-8 bg-gray-50 border-gray-200"> <div className="flex items-center space-x-3"> <CheckCircle2 className="w-6 h-6 text-gray-700"/> <div> <h3 className="font-semibold text-gray-900">Actualizaci√≥n Autom√°tica</h3> <p className="text-sm text-gray-800"> Esta p√°gina se actualiza autom√°ticamente cada 30 segundos para verificar el estado de tu pago. Te redirigiremos autom√°ticamente cuando el pago sea confirmado. </p> </div> </div> </Card> {/* Pending Reasons */} <Card className="p-8 mb-8"> <h2 className="text-2xl font-semibold text-gray-900 mb-6 text-center"> ¬øPor qu√© est√° pendiente? </h2> <div className="grid md:grid-cols-2 gap-4"> {getPendingReasons().map((reason, index) => ( <div key={index} className="p-4 border border-gray-200 rounded"> <h3 className="font-semibold text-gray-900 mb-2">{reason.title}</h3> <p className="text-sm text-gray-600 mb-2">{reason.description}</p> <p className="text-sm text-gray-700 font-medium"> Tiempo estimado: {reason.timeframe} </p> </div> ))} </div> </Card> {/* What Happens Next */} <Card className="p-8 mb-8 bg-gray-50 border-gray-200"> <div className="text-center"> <div className="w-16 h-16 bg-gray-100 rounded-full mx-auto mb-4 flex items-center justify-center"> <CheckCircle2 className="w-8 h-8 text-gray-700"/> </div> <h2 className="text-2xl font-semibold text-gray-900 mb-4"> ¬øQu√© sucede ahora? </h2> <div className="space-y-3 text-left max-w-2xl mx-auto"> <div className="flex items-start space-x-3"> <div className="w-6 h-6 bg-gray-100 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5"> <span className="text-xs font-bold text-gray-700">1</span> </div> <p className="text-gray-700"> Estamos procesando tu pago con el m√©todo seleccionado </p> </div> <div className="flex items-start space-x-3"> <div className="w-6 h-6 bg-gray-100 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5"> <span className="text-xs font-bold text-gray-700">2</span> </div> <p className="text-gray-700"> Recibir√°s una notificaci√≥n por email cuando se confirme </p> </div> <div className="flex items-start space-x-3"> <div className="w-6 h-6 bg-gray-100 rounded-full flex items-center justify-center flex-shrink-0 mt-0.5"> <span className="text-xs font-bold text-gray-700">3</span> </div> <p className="text-gray-700"> Tu servicio ser√° activado autom√°ticamente al confirmar el pago </p> </div> </div> </div> </Card> {/* Actions */} <Card className="p-8 mb-8"> <h2 className="text-2xl font-semibold text-gray-900 mb-6 text-center"> Mientras tanto... </h2> <div className="grid md:grid-cols-2 gap-4"> <Link to="/dashboard"> <Card className="p-6 hover:shadow-lg transition-all cursor-pointer group border-2 hover:border-gray-200"> <div className="flex items-center space-x-4"> <div className="w-12 h-12 bg-gray-50 rounded-full flex items-center justify-center group-hover:bg-gray-100 transition-colors"> <Home className="w-6 h-6 text-gray-700"/> </div> <div className="flex-1"> <h3 className="font-semibold text-gray-900 group-hover:text-gray-700 transition-colors"> Ir al Dashboard </h3> <p className="text-sm text-gray-600"> Contin√∫a usando la plataforma </p> </div> </div> </Card> </Link> <Card className="p-6 border-2 border-gray-200"> <div className="flex items-center space-x-4"> <div className="w-12 h-12 bg-gray-50 rounded-full flex items-center justify-center"> <AlertCircle className="w-6 h-6 text-gray-400"/> </div> <div className="flex-1"> <h3 className="font-semibold text-gray-900"> Te Notificaremos </h3> <p className="text-sm text-gray-600"> Recibir√°s un email cuando se complete </p> </div> </div> </Card> </div> </Card> {/* Support */} <Card className="p-8 bg-gray-50"> <div className="text-center"> <div className="w-16 h-16 bg-gray-100 rounded-full mx-auto mb-4 flex items-center justify-center"> <MessageCircle className="w-8 h-8 text-gray-600"/> </div> <h3 className="text-xl font-semibold text-gray-900 mb-2"> ¬øNecesitas ayuda? </h3> <p className="text-gray-600 mb-6"> Si tienes dudas sobre tu pago o necesitas asistencia </p> <div className="flex flex-col sm:flex-row justify-center space-y-2 sm:space-y-0 sm:space-x-4"> <Button variant="outline"> <MessageCircle className="w-4 h-4 mr-2"/> Chat de Soporte </Button> <Button variant="outline"> Enviar Email </Button> </div> </div> </Card> </div> </div> <Footer /> </div> );
}; export default PaymentPending;