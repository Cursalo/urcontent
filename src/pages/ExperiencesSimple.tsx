import { useState } from"react";
import { useQuery } from"@tanstack/react-query";
import { Link } from"react-router-dom";
import { Button } from"@/components/ui/button";
import { Input } from"@/components/ui/input";
import { Card } from"@/components/ui/card";
import { Badge } from"@/components/ui/badge";
import { Tabs, TabsContent, TabsList, TabsTrigger } from"@/components/ui/tabs";
import { Search, MapPin, Clock, Star, Calendar, Heart, CreditCard
} from"lucide-react";
import { Navbar } from"@/components/layout/Navbar";
import { Footer } from"@/components/layout/Footer";
import { BookingModal } from"@/components/booking/BookingModal";
import { offersService, creditsService, type Offer } from"@/services";
import { useAuth } from"@/contexts/AuthContext";
import { toast } from"sonner"; const ExperiencesSimple = () => { const [searchQuery, setSearchQuery] = useState(""); const [selectedCategory, setSelectedCategory] = useState("Todos"); const { user } = useAuth(); // Fetch offers const { data: offers = [], isLoading: offersLoading } = useQuery({ queryKey: ['offers', searchQuery, selectedCategory], queryFn: () => offersService.getOffers({ search: searchQuery || undefined, category: selectedCategory !=="Todos"? selectedCategory.toLowerCase() : undefined, is_active: true, limit: 50 }) }); // Fetch user credits const { data: userCredits = 0 } = useQuery({ queryKey: ['user-credits', user?.id], queryFn: () => creditsService.getUserCreditBalance(user?.id!), enabled: !!user?.id }); // Helper function const getMembershipBadge = (tier: string) => { const tierConfig = { basic: { label:"Basic", className:"bg-gray-100 text-gray-800"}, premium: { label:"Premium", className:"bg-gray-100 text-gray-900"}, vip: { label:"VIP", className:"bg-gray-100 text-gray-900"} }; const config = tierConfig[tier as keyof typeof tierConfig] || tierConfig.basic; return ( <Badge className={`text-xs px-2 py-1 rounded-full ${config.className}`}> {config.label} </Badge> ); }; return ( <div className="min-h-screen bg-white"> <Navbar /> <div className="pt-20"> {/* Header Section */} <section className="py-16 bg-gray-50"> <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8"> <div className="text-center mb-12"> <h1 className="text-4xl md:text-5xl font-light text-black mb-4"> Experiencias <span className="font-semibold">exclusivas te esperan</span> </h1> <p className="text-xl text-gray-600 max-w-3xl mx-auto"> Accede a m√°s de 350 venues premium en Argentina. Descubre ofertas exclusivas solo para miembros URContent. </p> </div> {/* Search Bar */} <div className="max-w-2xl mx-auto relative mb-8"> <div className="relative"> <Search className="absolute left-4 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400"/> <Input placeholder="Busca salones, spas, restaurantes o gimnasios..."value={searchQuery} onChange={(e) => setSearchQuery(e.target.value)} className="pl-12 pr-4 py-4 text-lg rounded-full border-gray-200 focus:border-black transition-colors"/> </div> </div> {/* Category Filters */} <div className="flex justify-center mb-8"> <Tabs value={selectedCategory} onValueChange={setSelectedCategory} className="w-full max-w-4xl"> <TabsList className="grid w-full grid-cols-6"> <TabsTrigger value="Todos">Todos</TabsTrigger> <TabsTrigger value="Beauty">Beauty</TabsTrigger> <TabsTrigger value="Wellness">Wellness</TabsTrigger> <TabsTrigger value="Fitness">Fitness</TabsTrigger> <TabsTrigger value="Restaurant">Restaurant</TabsTrigger> <TabsTrigger value="Spa">Spa</TabsTrigger> </TabsList> </Tabs> </div> </div> </section> {/* Simple Offers Grid */} <section className="py-12"> <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8"> <div className="flex items-center justify-between mb-8"> <div className="text-gray-600"> {offersLoading ? 'Cargando...' : `${offers.length} experiencias encontradas`} </div> <div className="flex items-center space-x-2 text-sm text-gray-500"> <CreditCard className="w-4 h-4"/> <span>Tus cr√©ditos: {userCredits}</span> </div> </div> {/* Simple Offers Grid */} {offersLoading ? ( <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8"> {[...Array(8)].map((_, i) => ( <Card key={i} className="bg-white border border-gray-100 rounded overflow-hidden"> <div className="h-48 bg-gray-200 animate-pulse"/> <div className="p-6 space-y-3"> <div className="h-4 bg-gray-200 rounded animate-pulse"/> <div className="h-3 bg-gray-200 rounded animate-pulse w-3/4"/> <div className="h-3 bg-gray-200 rounded animate-pulse w-1/2"/> </div> </Card> ))} </div> ) : offers.length === 0 ? ( <div className="text-center py-16"> <div className="text-gray-400 text-6xl mb-4">üîç</div> <h3 className="text-xl font-medium text-gray-600 mb-2">No hay experiencias disponibles</h3> <p className="text-gray-500">Intenta cambiar los filtros de b√∫squeda</p> </div> ) : ( <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-8"> {offers.map((offer) => ( <Card key={offer.id} className="group bg-white border border-gray-100 rounded overflow-hidden hover:border-gray-200 hover:shadow-xl hover:shadow-black/5 transition-all duration-300"> {/* Offer Image */} <div className="relative h-48 bg-gray-100"> <img src={offer.images?.[0] ||"https://images.unsplash.com/photo-1515886657613-9f3515b0c78f?w=300&h=300&fit=crop"} alt={offer.title} className="w-full h-full object-cover group-hover:scale-105 transition-transform duration-300"/> {/* Credits Badge */} <div className="absolute top-3 left-3"> <div className="bg-black/80 text-white px-2 py-1 rounded-full text-xs font-medium"> {offer.credit_cost} cr√©ditos </div> </div> </div> <div className="p-6"> {/* Basic Info */} <div className="mb-4"> <div className="flex items-center justify-between mb-2"> <h3 className="font-semibold text-black truncate">{offer.title}</h3> {getMembershipBadge(offer.required_membership_tier || 'basic')} </div> <p className="text-gray-500 text-sm font-medium">{offer.venue?.name}</p> <div className="flex items-center space-x-1 text-gray-400 text-xs mt-1"> <MapPin className="w-3 h-3"/> <span>{offer.venue?.location || offer.venue?.address}</span> </div> </div> {/* Description */} <p className="text-gray-600 text-sm mb-4 line-clamp-2"> {offer.description} </p> {/* Stats */} <div className="flex items-center justify-between mb-4 py-3 border-t border-gray-100"> <div className="flex items-center space-x-4 text-sm"> <div className="flex items-center space-x-1"> <Star className="w-4 h-4 text-gray-400 fill-current"/> <span className="font-medium">{offer.venue?.rating || 5.0}</span> <span className="text-gray-500">({offer.reservations?.length || 0})</span> </div> <div className="flex items-center space-x-1"> <Clock className="w-4 h-4 text-gray-400"/> <span className="text-gray-600">{offer.duration_minutes || 60}min</span> </div> </div> </div> {/* Value and Availability */} <div className="mb-4"> <div className="text-center mb-2"> <div className="text-gray-500 text-xs line-through">${offer.original_value || 0}</div> <div className="text-gray-700 font-bold text-lg">GRATIS</div> </div> <div className="text-center text-xs text-gray-500"> {offer.is_active ? 'Disponible ahora' : 'No disponible'} </div> </div> {/* Actions */} <div className="flex space-x-2"> {user ? ( <BookingModal offer={offer} trigger={ <Button size="sm"className="flex-1 bg-black hover:bg-gray-800 text-white rounded-full"disabled={!offer.is_active || userCredits < offer.credit_cost} > <Calendar className="w-4 h-4 mr-2"/> {userCredits < offer.credit_cost ? 'Sin cr√©ditos' : 'Reservar'} </Button> } onBookingComplete={(booking) => { toast.success("¬°Reserva confirmada!"); }} /> ) : ( <Button size="sm"className="flex-1 bg-black hover:bg-gray-800 text-white rounded-full"onClick={() => toast.error("Inicia sesi√≥n para reservar")} > <Calendar className="w-4 h-4 mr-2"/> Reservar </Button> )} <Button size="sm"variant="outline"className="rounded-full px-3"> <Heart className="w-4 h-4"/> </Button> </div> </div> </Card> ))} </div> )} </div> </section> </div> <Footer /> </div> );
}; export default ExperiencesSimple;