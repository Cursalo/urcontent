// Business-specific mock data service
// Provides realistic business dashboard data for testing and demo purposes import { mockBusinessProfiles } from '@/data/mockBusinessProfiles';
import { mockCollaborations } from '@/data/mockCollaborations';
import { mockUsers } from '@/data/mockUsers'; export interface BusinessDashboardData { profile: any; user: any; collaborations: any[]; metrics: { totalSpent: number; activeCampaigns: number; totalReach: number; avgCampaignROI: number; completedCampaigns: number; avgRating: number; }; analytics: { monthly: any[]; weekly: any[]; daily: any[]; };
} export class BusinessMockDataService { // Get business dashboard data by user ID async getBusinessDashboardData(userId: string): Promise<BusinessDashboardData | null> { try { // Find business profile by user ID const businessProfile = mockBusinessProfiles.find(profile => profile.user_id === userId); if (!businessProfile) { console.warn(`No business profile found for user ID: ${userId}`); return this.getDefaultBusinessData(userId); } // Find user data const user = mockUsers.find(u => u.id === userId); if (!user) { console.warn(`No user found for ID: ${userId}`); return null; } // Find campaigns (collaborations) for this business const businessCampaigns = mockCollaborations.filter(collab => collab.business_profile_id === businessProfile.id ); // Calculate metrics const metrics = this.calculateBusinessMetrics(businessProfile, businessCampaigns); // Generate analytics data const analytics = this.generateBusinessAnalytics(businessCampaigns); return { profile: { ...businessProfile, user: { id: user.id, email: user.email, full_name: user.full_name } }, user: { id: user.id, email: user.email, full_name: user.full_name, role: user.role }, collaborations: businessCampaigns, metrics, analytics }; } catch (error) { console.error('Error fetching business dashboard data:', error); return this.getDefaultBusinessData(userId); } } // Calculate business metrics from profile and campaigns private calculateBusinessMetrics(profile: any, campaigns: any[]) { const activeCampaigns = campaigns.filter(c => ['pending', 'in_progress'].includes(c.status) ).length; const completedCampaigns = campaigns.filter(c => c.status === 'completed' ).length; const totalSpent = campaigns.reduce((sum, campaign) => sum + (campaign.compensation_amount || 0), 0 ); const totalReach = campaigns.reduce((sum, campaign) => sum + (campaign.reach || 0), 0 ); // Calculate ROI based on reach vs spend const avgCampaignROI = totalSpent > 0 ? Math.round((totalReach / totalSpent) * 100) / 100 : 0; const avgRating = profile.collaboration_history?.average_rating || 4.5; return { totalSpent, activeCampaigns, totalReach, avgCampaignROI, completedCampaigns, avgRating }; } // Generate analytics data for business dashboard private generateBusinessAnalytics(campaigns: any[]) { const currentDate = new Date(); // Monthly analytics (last 6 months) const monthly = []; for (let i = 5; i >= 0; i--) { const date = new Date(currentDate); date.setMonth(date.getMonth() - i); const monthCampaigns = campaigns.filter(c => { const campaignDate = new Date(c.created_at); return campaignDate.getMonth() === date.getMonth() && campaignDate.getFullYear() === date.getFullYear(); }); const monthlySpent = monthCampaigns.reduce((sum, c) => sum + (c.compensation_amount || 0), 0); const monthlyReach = monthCampaigns.reduce((sum, c) => sum + (c.reach || 0), 0); const monthlyEngagement = monthCampaigns.reduce((sum, c) => sum + (c.engagement_rate || 0), 0) / Math.max(monthCampaigns.length, 1); monthly.push({ month: date.toLocaleDateString('en-US', { month: 'short' }), spent: monthlySpent, reach: monthlyReach, engagement: Math.round(monthlyEngagement * 100) / 100, campaigns: monthCampaigns.length, roi: monthlySpent > 0 ? Math.round((monthlyReach / monthlySpent) * 100) / 100 : 0 }); } // Weekly analytics (last 8 weeks) const weekly = []; for (let i = 7; i >= 0; i--) { const date = new Date(currentDate); date.setDate(date.getDate() - (i * 7)); const weekStart = new Date(date); weekStart.setDate(date.getDate() - date.getDay()); const weekEnd = new Date(weekStart); weekEnd.setDate(weekStart.getDate() + 6); const weekCampaigns = campaigns.filter(c => { const campaignDate = new Date(c.created_at); return campaignDate >= weekStart && campaignDate <= weekEnd; }); weekly.push({ week: `W${Math.ceil((date.getDate()) / 7)}`, campaigns: weekCampaigns.length, spent: weekCampaigns.reduce((sum, c) => sum + (c.compensation_amount || 0), 0), reach: weekCampaigns.reduce((sum, c) => sum + (c.reach || 0), 0), engagement: weekCampaigns.reduce((sum, c) => sum + (c.engagement_rate || 0), 0) / Math.max(weekCampaigns.length, 1) }); } // Daily analytics (last 30 days) const daily = []; for (let i = 29; i >= 0; i--) { const date = new Date(currentDate); date.setDate(date.getDate() - i); const dayCampaigns = campaigns.filter(c => { const campaignDate = new Date(c.created_at); return campaignDate.toDateString() === date.toDateString(); }); daily.push({ date: date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }), campaigns: dayCampaigns.length, spent: dayCampaigns.reduce((sum, c) => sum + (c.compensation_amount || 0), 0), reach: dayCampaigns.reduce((sum, c) => sum + (c.reach || 0), 0), impressions: dayCampaigns.reduce((sum, c) => sum + (c.impressions || 0), 0) }); } return { monthly, weekly, daily }; } // Get default business data for users without profiles private getDefaultBusinessData(userId: string): BusinessDashboardData { const defaultUser = mockUsers.find(u => u.id === userId) || { id: userId, email: 'business@example.com', full_name: 'Business User', role: 'business' }; return { profile: { id: `default-business-${userId}`, user_id: userId, company_name: 'My Business', description: 'Welcome to your business dashboard!', industry: 'Other', company_size: '1-10', website_url: '', contact_email: defaultUser.email, is_verified_business: false, campaign_budget_range: { min: 10000, max: 100000 }, user: { id: defaultUser.id, email: defaultUser.email, full_name: defaultUser.full_name } }, user: { id: defaultUser.id, email: defaultUser.email, full_name: defaultUser.full_name, role: 'business' }, collaborations: [], metrics: { totalSpent: 0, activeCampaigns: 0, totalReach: 0, avgCampaignROI: 0, completedCampaigns: 0, avgRating: 0 }, analytics: { monthly: this.getEmptyAnalytics('monthly'), weekly: this.getEmptyAnalytics('weekly'), daily: this.getEmptyAnalytics('daily') } }; } // Generate empty analytics structure private getEmptyAnalytics(type: 'monthly' | 'weekly' | 'daily') { const currentDate = new Date(); const data = []; if (type === 'monthly') { for (let i = 5; i >= 0; i--) { const date = new Date(currentDate); date.setMonth(date.getMonth() - i); data.push({ month: date.toLocaleDateString('en-US', { month: 'short' }), spent: 0, reach: 0, engagement: 0, campaigns: 0, roi: 0 }); } } else if (type === 'weekly') { for (let i = 7; i >= 0; i--) { const date = new Date(currentDate); date.setDate(date.getDate() - (i * 7)); data.push({ week: `W${Math.ceil((date.getDate()) / 7)}`, campaigns: 0, spent: 0, reach: 0, engagement: 0 }); } } else if (type === 'daily') { for (let i = 29; i >= 0; i--) { const date = new Date(currentDate); date.setDate(date.getDate() - i); data.push({ date: date.toLocaleDateString('en-US', { month: 'short', day: 'numeric' }), campaigns: 0, spent: 0, reach: 0, impressions: 0 }); } } return data; } // Get demo business data for testing async getDemoBusinessData(): Promise<BusinessDashboardData> { const demoProfile = mockBusinessProfiles[0]; // Use first business profile const demoUser = mockUsers.find(u => u.id === demoProfile.user_id); if (!demoUser) { throw new Error('Demo user not found'); } return this.getBusinessDashboardData(demoUser.id) || this.getDefaultBusinessData(demoUser.id); } // Health check async healthCheck(): Promise<{ status: string; businessCount: number; campaignCount: number }> { const businessCount = mockBusinessProfiles.length; const campaignCount = mockCollaborations.length; return { status: 'healthy', businessCount, campaignCount }; }
} export const businessMockDataService = new BusinessMockDataService();
export default businessMockDataService;